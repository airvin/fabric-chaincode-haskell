{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!

module Token.Transaction where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
newtype TokenTransaction = TokenTransaction{tokenTransactionAction
                                            :: Hs.Maybe TokenTransactionAction}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TokenTransaction where
        nameOf _ = (Hs.fromString "TokenTransaction")
 
instance HsProtobuf.HasDefault TokenTransaction
 
instance HsProtobuf.Message TokenTransaction where
        encodeMessage _
          TokenTransaction{tokenTransactionAction = tokenTransactionAction}
          = (Hs.mconcat
               [case tokenTransactionAction of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TokenTransactionActionPlainAction y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Token.Transaction.PlainTokenAction)
                                        @(HsProtobuf.Nested Token.Transaction.PlainTokenAction)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure TokenTransaction) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap TokenTransactionActionPlainAction)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Token.Transaction.PlainTokenAction))
                        @(_ (Hs.Maybe Token.Transaction.PlainTokenAction))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB TokenTransaction where
        toJSONPB (TokenTransaction f1)
          = (HsJSONPB.object
               [(let encodeAction
                       = (case f1 of
                              Hs.Just (TokenTransactionActionPlainAction f1)
                                -> (HsJSONPB.pair "plain_action" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("action" .= (HsJSONPB.objectOrNull [encodeAction] options))
                         options
                       else encodeAction options)])
        toEncodingPB (TokenTransaction f1)
          = (HsJSONPB.pairs
               [(let encodeAction
                       = (case f1 of
                              Hs.Just (TokenTransactionActionPlainAction f1)
                                -> (HsJSONPB.pair "plain_action" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("action" .= (HsJSONPB.pairsOrNull [encodeAction] options)) options
                       else encodeAction options)])
 
instance HsJSONPB.FromJSONPB TokenTransaction where
        parseJSONPB
          = (HsJSONPB.withObject "TokenTransaction"
               (\ obj ->
                  (Hs.pure TokenTransaction) <*>
                    (let parseAction parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TokenTransactionActionPlainAction <$>
                                  (HsJSONPB.parseField parseObj "plain_action"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "action") Hs.>>=
                          (HsJSONPB.withObject "action" parseAction))
                         <|> (parseAction obj))))
 
instance HsJSONPB.ToJSON TokenTransaction where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON TokenTransaction where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema TokenTransaction where
        declareNamedSchema _
          = do let declare_action = HsJSONPB.declareSchemaRef
               tokenTransactionAction <- declare_action Proxy.Proxy
               let _ = Hs.pure TokenTransaction <*>
                         HsJSONPB.asProxy declare_action
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TokenTransaction",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("action", tokenTransactionAction)]}})
 
data TokenTransactionAction = TokenTransactionActionPlainAction Token.Transaction.PlainTokenAction
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TokenTransactionAction where
        nameOf _ = (Hs.fromString "TokenTransactionAction")
 
instance HsJSONPB.ToSchema TokenTransactionAction where
        declareNamedSchema _
          = do let declare_plain_action = HsJSONPB.declareSchemaRef
               tokenTransactionActionPlainAction <- declare_plain_action
                                                      Proxy.Proxy
               let _ = Hs.pure TokenTransactionActionPlainAction <*>
                         HsJSONPB.asProxy declare_plain_action
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TokenTransactionAction",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("plain_action",
                                                         tokenTransactionActionPlainAction)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype PlainTokenAction = PlainTokenAction{plainTokenActionData ::
                                            Hs.Maybe PlainTokenActionData}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named PlainTokenAction where
        nameOf _ = (Hs.fromString "PlainTokenAction")
 
instance HsProtobuf.HasDefault PlainTokenAction
 
instance HsProtobuf.Message PlainTokenAction where
        encodeMessage _
          PlainTokenAction{plainTokenActionData = plainTokenActionData}
          = (Hs.mconcat
               [case plainTokenActionData of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             PlainTokenActionDataPlainImport y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Token.Transaction.PlainImport)
                                        @(HsProtobuf.Nested Token.Transaction.PlainImport)
                                        (Hs.Just y)))
                             PlainTokenActionDataPlainTransfer y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Token.Transaction.PlainTransfer)
                                        @(HsProtobuf.Nested Token.Transaction.PlainTransfer)
                                        (Hs.Just y)))
                             PlainTokenActionDataPlainRedeem y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                                     (Hs.coerce @(Hs.Maybe Token.Transaction.PlainTransfer)
                                        @(HsProtobuf.Nested Token.Transaction.PlainTransfer)
                                        (Hs.Just y)))
                             PlainTokenActionDataPlainApprove y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                                     (Hs.coerce @(Hs.Maybe Token.Transaction.PlainApprove)
                                        @(HsProtobuf.Nested Token.Transaction.PlainApprove)
                                        (Hs.Just y)))
                             PlainTokenActionDataPlainTransferFrom y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                                     (Hs.coerce @(Hs.Maybe Token.Transaction.PlainTransferFrom)
                                        @(HsProtobuf.Nested Token.Transaction.PlainTransferFrom)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure PlainTokenAction) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap PlainTokenActionDataPlainImport)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Token.Transaction.PlainImport))
                        @(_ (Hs.Maybe Token.Transaction.PlainImport))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap PlainTokenActionDataPlainTransfer)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Token.Transaction.PlainTransfer))
                        @(_ (Hs.Maybe Token.Transaction.PlainTransfer))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 3),
                   (Hs.pure (Hs.fmap PlainTokenActionDataPlainRedeem)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Token.Transaction.PlainTransfer))
                        @(_ (Hs.Maybe Token.Transaction.PlainTransfer))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 4),
                   (Hs.pure (Hs.fmap PlainTokenActionDataPlainApprove)) <*>
                     (Hs.coerce @(_ (HsProtobuf.Nested Token.Transaction.PlainApprove))
                        @(_ (Hs.Maybe Token.Transaction.PlainApprove))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 5),
                   (Hs.pure (Hs.fmap PlainTokenActionDataPlainTransferFrom)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Token.Transaction.PlainTransferFrom))
                        @(_ (Hs.Maybe Token.Transaction.PlainTransferFrom))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB PlainTokenAction where
        toJSONPB (PlainTokenAction f1_or_f2_or_f3_or_f4_or_f5)
          = (HsJSONPB.object
               [(let encodeData
                       = (case f1_or_f2_or_f3_or_f4_or_f5 of
                              Hs.Just (PlainTokenActionDataPlainImport f1)
                                -> (HsJSONPB.pair "plain_import" f1)
                              Hs.Just (PlainTokenActionDataPlainTransfer f2)
                                -> (HsJSONPB.pair "plain_transfer" f2)
                              Hs.Just (PlainTokenActionDataPlainRedeem f3)
                                -> (HsJSONPB.pair "plain_redeem" f3)
                              Hs.Just (PlainTokenActionDataPlainApprove f4)
                                -> (HsJSONPB.pair "plain_approve" f4)
                              Hs.Just (PlainTokenActionDataPlainTransferFrom f5)
                                -> (HsJSONPB.pair "plain_transfer_From" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("data" .= (HsJSONPB.objectOrNull [encodeData] options)) options
                       else encodeData options)])
        toEncodingPB (PlainTokenAction f1_or_f2_or_f3_or_f4_or_f5)
          = (HsJSONPB.pairs
               [(let encodeData
                       = (case f1_or_f2_or_f3_or_f4_or_f5 of
                              Hs.Just (PlainTokenActionDataPlainImport f1)
                                -> (HsJSONPB.pair "plain_import" f1)
                              Hs.Just (PlainTokenActionDataPlainTransfer f2)
                                -> (HsJSONPB.pair "plain_transfer" f2)
                              Hs.Just (PlainTokenActionDataPlainRedeem f3)
                                -> (HsJSONPB.pair "plain_redeem" f3)
                              Hs.Just (PlainTokenActionDataPlainApprove f4)
                                -> (HsJSONPB.pair "plain_approve" f4)
                              Hs.Just (PlainTokenActionDataPlainTransferFrom f5)
                                -> (HsJSONPB.pair "plain_transfer_From" f5)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("data" .= (HsJSONPB.pairsOrNull [encodeData] options)) options
                       else encodeData options)])
 
instance HsJSONPB.FromJSONPB PlainTokenAction where
        parseJSONPB
          = (HsJSONPB.withObject "PlainTokenAction"
               (\ obj ->
                  (Hs.pure PlainTokenAction) <*>
                    (let parseData parseObj
                           = Hs.msum
                               [Hs.Just Hs.. PlainTokenActionDataPlainImport <$>
                                  (HsJSONPB.parseField parseObj "plain_import"),
                                Hs.Just Hs.. PlainTokenActionDataPlainTransfer <$>
                                  (HsJSONPB.parseField parseObj "plain_transfer"),
                                Hs.Just Hs.. PlainTokenActionDataPlainRedeem <$>
                                  (HsJSONPB.parseField parseObj "plain_redeem"),
                                Hs.Just Hs.. PlainTokenActionDataPlainApprove <$>
                                  (HsJSONPB.parseField parseObj "plain_approve"),
                                Hs.Just Hs.. PlainTokenActionDataPlainTransferFrom <$>
                                  (HsJSONPB.parseField parseObj "plain_transfer_From"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "data") Hs.>>= (HsJSONPB.withObject "data" parseData)) <|>
                         (parseData obj))))
 
instance HsJSONPB.ToJSON PlainTokenAction where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON PlainTokenAction where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema PlainTokenAction where
        declareNamedSchema _
          = do let declare_data = HsJSONPB.declareSchemaRef
               plainTokenActionData <- declare_data Proxy.Proxy
               let _ = Hs.pure PlainTokenAction <*> HsJSONPB.asProxy declare_data
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "PlainTokenAction",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("data", plainTokenActionData)]}})
 
data PlainTokenActionData = PlainTokenActionDataPlainImport Token.Transaction.PlainImport
                          | PlainTokenActionDataPlainTransfer Token.Transaction.PlainTransfer
                          | PlainTokenActionDataPlainRedeem Token.Transaction.PlainTransfer
                          | PlainTokenActionDataPlainApprove Token.Transaction.PlainApprove
                          | PlainTokenActionDataPlainTransferFrom Token.Transaction.PlainTransferFrom
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named PlainTokenActionData where
        nameOf _ = (Hs.fromString "PlainTokenActionData")
 
instance HsJSONPB.ToSchema PlainTokenActionData where
        declareNamedSchema _
          = do let declare_plain_import = HsJSONPB.declareSchemaRef
               plainTokenActionDataPlainImport <- declare_plain_import Proxy.Proxy
               let _ = Hs.pure PlainTokenActionDataPlainImport <*>
                         HsJSONPB.asProxy declare_plain_import
               let declare_plain_transfer = HsJSONPB.declareSchemaRef
               plainTokenActionDataPlainTransfer <- declare_plain_transfer
                                                      Proxy.Proxy
               let _ = Hs.pure PlainTokenActionDataPlainTransfer <*>
                         HsJSONPB.asProxy declare_plain_transfer
               let declare_plain_redeem = HsJSONPB.declareSchemaRef
               plainTokenActionDataPlainRedeem <- declare_plain_redeem Proxy.Proxy
               let _ = Hs.pure PlainTokenActionDataPlainRedeem <*>
                         HsJSONPB.asProxy declare_plain_redeem
               let declare_plain_approve = HsJSONPB.declareSchemaRef
               plainTokenActionDataPlainApprove <- declare_plain_approve
                                                     Proxy.Proxy
               let _ = Hs.pure PlainTokenActionDataPlainApprove <*>
                         HsJSONPB.asProxy declare_plain_approve
               let declare_plain_transfer_From = HsJSONPB.declareSchemaRef
               plainTokenActionDataPlainTransferFrom <- declare_plain_transfer_From
                                                          Proxy.Proxy
               let _ = Hs.pure PlainTokenActionDataPlainTransferFrom <*>
                         HsJSONPB.asProxy declare_plain_transfer_From
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "PlainTokenActionData",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("plain_import",
                                                         plainTokenActionDataPlainImport),
                                                        ("plain_transfer",
                                                         plainTokenActionDataPlainTransfer),
                                                        ("plain_redeem",
                                                         plainTokenActionDataPlainRedeem),
                                                        ("plain_approve",
                                                         plainTokenActionDataPlainApprove),
                                                        ("plain_transfer_From",
                                                         plainTokenActionDataPlainTransferFrom)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype PlainImport = PlainImport{plainImportOutputs ::
                                  Hs.Vector Token.Transaction.PlainOutput}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named PlainImport where
        nameOf _ = (Hs.fromString "PlainImport")
 
instance HsProtobuf.HasDefault PlainImport
 
instance HsProtobuf.Message PlainImport where
        encodeMessage _
          PlainImport{plainImportOutputs = plainImportOutputs}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Token.Transaction.PlainOutput)
                      @(HsProtobuf.NestedVec Token.Transaction.PlainOutput)
                      plainImportOutputs))])
        decodeMessage _
          = (Hs.pure PlainImport) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Token.Transaction.PlainOutput))
                 @(_ (Hs.Vector Token.Transaction.PlainOutput))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "PlainOutput")))
                (HsProtobuf.Single "outputs")
                []
                "")]
 
instance HsJSONPB.ToJSONPB PlainImport where
        toJSONPB (PlainImport f1) = (HsJSONPB.object ["outputs" .= f1])
        toEncodingPB (PlainImport f1) = (HsJSONPB.pairs ["outputs" .= f1])
 
instance HsJSONPB.FromJSONPB PlainImport where
        parseJSONPB
          = (HsJSONPB.withObject "PlainImport"
               (\ obj -> (Hs.pure PlainImport) <*> obj .: "outputs"))
 
instance HsJSONPB.ToJSON PlainImport where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON PlainImport where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema PlainImport where
        declareNamedSchema _
          = do let declare_outputs = HsJSONPB.declareSchemaRef
               plainImportOutputs <- declare_outputs Proxy.Proxy
               let _ = Hs.pure PlainImport <*> HsJSONPB.asProxy declare_outputs
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "PlainImport",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("outputs", plainImportOutputs)]}})
 
data PlainTransfer = PlainTransfer{plainTransferInputs ::
                                   Hs.Vector Token.Transaction.InputId,
                                   plainTransferOutputs :: Hs.Vector Token.Transaction.PlainOutput}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named PlainTransfer where
        nameOf _ = (Hs.fromString "PlainTransfer")
 
instance HsProtobuf.HasDefault PlainTransfer
 
instance HsProtobuf.Message PlainTransfer where
        encodeMessage _
          PlainTransfer{plainTransferInputs = plainTransferInputs,
                        plainTransferOutputs = plainTransferOutputs}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Token.Transaction.InputId)
                      @(HsProtobuf.NestedVec Token.Transaction.InputId)
                      plainTransferInputs)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Vector Token.Transaction.PlainOutput)
                      @(HsProtobuf.NestedVec Token.Transaction.PlainOutput)
                      plainTransferOutputs))])
        decodeMessage _
          = (Hs.pure PlainTransfer) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Token.Transaction.InputId))
                 @(_ (Hs.Vector Token.Transaction.InputId))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Token.Transaction.PlainOutput))
                 @(_ (Hs.Vector Token.Transaction.PlainOutput))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "InputId")))
                (HsProtobuf.Single "inputs")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "PlainOutput")))
                (HsProtobuf.Single "outputs")
                []
                "")]
 
instance HsJSONPB.ToJSONPB PlainTransfer where
        toJSONPB (PlainTransfer f1 f2)
          = (HsJSONPB.object ["inputs" .= f1, "outputs" .= f2])
        toEncodingPB (PlainTransfer f1 f2)
          = (HsJSONPB.pairs ["inputs" .= f1, "outputs" .= f2])
 
instance HsJSONPB.FromJSONPB PlainTransfer where
        parseJSONPB
          = (HsJSONPB.withObject "PlainTransfer"
               (\ obj ->
                  (Hs.pure PlainTransfer) <*> obj .: "inputs" <*> obj .: "outputs"))
 
instance HsJSONPB.ToJSON PlainTransfer where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON PlainTransfer where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema PlainTransfer where
        declareNamedSchema _
          = do let declare_inputs = HsJSONPB.declareSchemaRef
               plainTransferInputs <- declare_inputs Proxy.Proxy
               let declare_outputs = HsJSONPB.declareSchemaRef
               plainTransferOutputs <- declare_outputs Proxy.Proxy
               let _ = Hs.pure PlainTransfer <*> HsJSONPB.asProxy declare_inputs
                         <*> HsJSONPB.asProxy declare_outputs
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "PlainTransfer",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("inputs", plainTransferInputs),
                                                        ("outputs", plainTransferOutputs)]}})
 
data PlainApprove = PlainApprove{plainApproveInputs ::
                                 Hs.Vector Token.Transaction.InputId,
                                 plainApproveDelegatedOutputs ::
                                 Hs.Vector Token.Transaction.PlainDelegatedOutput,
                                 plainApproveOutput :: Hs.Maybe Token.Transaction.PlainOutput}
                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named PlainApprove where
        nameOf _ = (Hs.fromString "PlainApprove")
 
instance HsProtobuf.HasDefault PlainApprove
 
instance HsProtobuf.Message PlainApprove where
        encodeMessage _
          PlainApprove{plainApproveInputs = plainApproveInputs,
                       plainApproveDelegatedOutputs = plainApproveDelegatedOutputs,
                       plainApproveOutput = plainApproveOutput}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Token.Transaction.InputId)
                      @(HsProtobuf.NestedVec Token.Transaction.InputId)
                      plainApproveInputs)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Vector Token.Transaction.PlainDelegatedOutput)
                      @(HsProtobuf.NestedVec Token.Transaction.PlainDelegatedOutput)
                      plainApproveDelegatedOutputs)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Maybe Token.Transaction.PlainOutput)
                      @(HsProtobuf.Nested Token.Transaction.PlainOutput)
                      plainApproveOutput))])
        decodeMessage _
          = (Hs.pure PlainApprove) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Token.Transaction.InputId))
                 @(_ (Hs.Vector Token.Transaction.InputId))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Token.Transaction.PlainDelegatedOutput))
                 @(_ (Hs.Vector Token.Transaction.PlainDelegatedOutput))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Token.Transaction.PlainOutput))
                 @(_ (Hs.Maybe Token.Transaction.PlainOutput))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "InputId")))
                (HsProtobuf.Single "inputs")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "PlainDelegatedOutput")))
                (HsProtobuf.Single "delegated_outputs")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "PlainOutput")))
                (HsProtobuf.Single "output")
                []
                "")]
 
instance HsJSONPB.ToJSONPB PlainApprove where
        toJSONPB (PlainApprove f1 f2 f3)
          = (HsJSONPB.object
               ["inputs" .= f1, "delegated_outputs" .= f2, "output" .= f3])
        toEncodingPB (PlainApprove f1 f2 f3)
          = (HsJSONPB.pairs
               ["inputs" .= f1, "delegated_outputs" .= f2, "output" .= f3])
 
instance HsJSONPB.FromJSONPB PlainApprove where
        parseJSONPB
          = (HsJSONPB.withObject "PlainApprove"
               (\ obj ->
                  (Hs.pure PlainApprove) <*> obj .: "inputs" <*>
                    obj .: "delegated_outputs"
                    <*> obj .: "output"))
 
instance HsJSONPB.ToJSON PlainApprove where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON PlainApprove where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema PlainApprove where
        declareNamedSchema _
          = do let declare_inputs = HsJSONPB.declareSchemaRef
               plainApproveInputs <- declare_inputs Proxy.Proxy
               let declare_delegated_outputs = HsJSONPB.declareSchemaRef
               plainApproveDelegatedOutputs <- declare_delegated_outputs
                                                 Proxy.Proxy
               let declare_output = HsJSONPB.declareSchemaRef
               plainApproveOutput <- declare_output Proxy.Proxy
               let _ = Hs.pure PlainApprove <*> HsJSONPB.asProxy declare_inputs
                         <*> HsJSONPB.asProxy declare_delegated_outputs
                         <*> HsJSONPB.asProxy declare_output
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "PlainApprove",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("inputs", plainApproveInputs),
                                                        ("delegated_outputs",
                                                         plainApproveDelegatedOutputs),
                                                        ("output", plainApproveOutput)]}})
 
data PlainTransferFrom = PlainTransferFrom{plainTransferFromInputs
                                           :: Hs.Vector Token.Transaction.InputId,
                                           plainTransferFromOutputs ::
                                           Hs.Vector Token.Transaction.PlainOutput,
                                           plainTransferFromDelegatedOutput ::
                                           Hs.Maybe Token.Transaction.PlainDelegatedOutput}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named PlainTransferFrom where
        nameOf _ = (Hs.fromString "PlainTransferFrom")
 
instance HsProtobuf.HasDefault PlainTransferFrom
 
instance HsProtobuf.Message PlainTransferFrom where
        encodeMessage _
          PlainTransferFrom{plainTransferFromInputs =
                              plainTransferFromInputs,
                            plainTransferFromOutputs = plainTransferFromOutputs,
                            plainTransferFromDelegatedOutput =
                              plainTransferFromDelegatedOutput}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Token.Transaction.InputId)
                      @(HsProtobuf.NestedVec Token.Transaction.InputId)
                      plainTransferFromInputs)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Vector Token.Transaction.PlainOutput)
                      @(HsProtobuf.NestedVec Token.Transaction.PlainOutput)
                      plainTransferFromOutputs)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Maybe Token.Transaction.PlainDelegatedOutput)
                      @(HsProtobuf.Nested Token.Transaction.PlainDelegatedOutput)
                      plainTransferFromDelegatedOutput))])
        decodeMessage _
          = (Hs.pure PlainTransferFrom) <*>
              (Hs.coerce @(_ (HsProtobuf.NestedVec Token.Transaction.InputId))
                 @(_ (Hs.Vector Token.Transaction.InputId))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Token.Transaction.PlainOutput))
                 @(_ (Hs.Vector Token.Transaction.PlainOutput))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Token.Transaction.PlainDelegatedOutput))
                 @(_ (Hs.Maybe Token.Transaction.PlainDelegatedOutput))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "InputId")))
                (HsProtobuf.Single "inputs")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "PlainOutput")))
                (HsProtobuf.Single "outputs")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "PlainDelegatedOutput")))
                (HsProtobuf.Single "delegated_output")
                []
                "")]
 
instance HsJSONPB.ToJSONPB PlainTransferFrom where
        toJSONPB (PlainTransferFrom f1 f2 f3)
          = (HsJSONPB.object
               ["inputs" .= f1, "outputs" .= f2, "delegated_output" .= f3])
        toEncodingPB (PlainTransferFrom f1 f2 f3)
          = (HsJSONPB.pairs
               ["inputs" .= f1, "outputs" .= f2, "delegated_output" .= f3])
 
instance HsJSONPB.FromJSONPB PlainTransferFrom where
        parseJSONPB
          = (HsJSONPB.withObject "PlainTransferFrom"
               (\ obj ->
                  (Hs.pure PlainTransferFrom) <*> obj .: "inputs" <*>
                    obj .: "outputs"
                    <*> obj .: "delegated_output"))
 
instance HsJSONPB.ToJSON PlainTransferFrom where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON PlainTransferFrom where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema PlainTransferFrom where
        declareNamedSchema _
          = do let declare_inputs = HsJSONPB.declareSchemaRef
               plainTransferFromInputs <- declare_inputs Proxy.Proxy
               let declare_outputs = HsJSONPB.declareSchemaRef
               plainTransferFromOutputs <- declare_outputs Proxy.Proxy
               let declare_delegated_output = HsJSONPB.declareSchemaRef
               plainTransferFromDelegatedOutput <- declare_delegated_output
                                                     Proxy.Proxy
               let _ = Hs.pure PlainTransferFrom <*>
                         HsJSONPB.asProxy declare_inputs
                         <*> HsJSONPB.asProxy declare_outputs
                         <*> HsJSONPB.asProxy declare_delegated_output
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "PlainTransferFrom",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("inputs", plainTransferFromInputs),
                                                        ("outputs", plainTransferFromOutputs),
                                                        ("delegated_output",
                                                         plainTransferFromDelegatedOutput)]}})
 
data PlainOutput = PlainOutput{plainOutputOwner :: Hs.ByteString,
                               plainOutputType :: Hs.Text, plainOutputQuantity :: Hs.Word64}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named PlainOutput where
        nameOf _ = (Hs.fromString "PlainOutput")
 
instance HsProtobuf.HasDefault PlainOutput
 
instance HsProtobuf.Message PlainOutput where
        encodeMessage _
          PlainOutput{plainOutputOwner = plainOutputOwner,
                      plainOutputType = plainOutputType,
                      plainOutputQuantity = plainOutputQuantity}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   plainOutputOwner),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   plainOutputType),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   plainOutputQuantity)])
        decodeMessage _
          = (Hs.pure PlainOutput) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "owner")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "quantity")
                []
                "")]
 
instance HsJSONPB.ToJSONPB PlainOutput where
        toJSONPB (PlainOutput f1 f2 f3)
          = (HsJSONPB.object ["owner" .= f1, "type" .= f2, "quantity" .= f3])
        toEncodingPB (PlainOutput f1 f2 f3)
          = (HsJSONPB.pairs ["owner" .= f1, "type" .= f2, "quantity" .= f3])
 
instance HsJSONPB.FromJSONPB PlainOutput where
        parseJSONPB
          = (HsJSONPB.withObject "PlainOutput"
               (\ obj ->
                  (Hs.pure PlainOutput) <*> obj .: "owner" <*> obj .: "type" <*>
                    obj .: "quantity"))
 
instance HsJSONPB.ToJSON PlainOutput where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON PlainOutput where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema PlainOutput where
        declareNamedSchema _
          = do let declare_owner = HsJSONPB.declareSchemaRef
               plainOutputOwner <- declare_owner Proxy.Proxy
               let declare_type = HsJSONPB.declareSchemaRef
               plainOutputType <- declare_type Proxy.Proxy
               let declare_quantity = HsJSONPB.declareSchemaRef
               plainOutputQuantity <- declare_quantity Proxy.Proxy
               let _ = Hs.pure PlainOutput <*> HsJSONPB.asProxy declare_owner <*>
                         HsJSONPB.asProxy declare_type
                         <*> HsJSONPB.asProxy declare_quantity
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "PlainOutput",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("owner", plainOutputOwner),
                                                        ("type", plainOutputType),
                                                        ("quantity", plainOutputQuantity)]}})
 
data InputId = InputId{inputIdTxId :: Hs.Text,
                       inputIdIndex :: Hs.Word32}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named InputId where
        nameOf _ = (Hs.fromString "InputId")
 
instance HsProtobuf.HasDefault InputId
 
instance HsProtobuf.Message InputId where
        encodeMessage _
          InputId{inputIdTxId = inputIdTxId, inputIdIndex = inputIdIndex}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   inputIdTxId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   inputIdIndex)])
        decodeMessage _
          = (Hs.pure InputId) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "tx_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.UInt32)
                (HsProtobuf.Single "index")
                []
                "")]
 
instance HsJSONPB.ToJSONPB InputId where
        toJSONPB (InputId f1 f2)
          = (HsJSONPB.object ["tx_id" .= f1, "index" .= f2])
        toEncodingPB (InputId f1 f2)
          = (HsJSONPB.pairs ["tx_id" .= f1, "index" .= f2])
 
instance HsJSONPB.FromJSONPB InputId where
        parseJSONPB
          = (HsJSONPB.withObject "InputId"
               (\ obj -> (Hs.pure InputId) <*> obj .: "tx_id" <*> obj .: "index"))
 
instance HsJSONPB.ToJSON InputId where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON InputId where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema InputId where
        declareNamedSchema _
          = do let declare_tx_id = HsJSONPB.declareSchemaRef
               inputIdTxId <- declare_tx_id Proxy.Proxy
               let declare_index = HsJSONPB.declareSchemaRef
               inputIdIndex <- declare_index Proxy.Proxy
               let _ = Hs.pure InputId <*> HsJSONPB.asProxy declare_tx_id <*>
                         HsJSONPB.asProxy declare_index
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "InputId",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("tx_id", inputIdTxId),
                                                        ("index", inputIdIndex)]}})
 
data PlainDelegatedOutput = PlainDelegatedOutput{plainDelegatedOutputOwner
                                                 :: Hs.ByteString,
                                                 plainDelegatedOutputDelegatees ::
                                                 Hs.Vector Hs.ByteString,
                                                 plainDelegatedOutputType :: Hs.Text,
                                                 plainDelegatedOutputQuantity :: Hs.Word64}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named PlainDelegatedOutput where
        nameOf _ = (Hs.fromString "PlainDelegatedOutput")
 
instance HsProtobuf.HasDefault PlainDelegatedOutput
 
instance HsProtobuf.Message PlainDelegatedOutput where
        encodeMessage _
          PlainDelegatedOutput{plainDelegatedOutputOwner =
                                 plainDelegatedOutputOwner,
                               plainDelegatedOutputDelegatees = plainDelegatedOutputDelegatees,
                               plainDelegatedOutputType = plainDelegatedOutputType,
                               plainDelegatedOutputQuantity = plainDelegatedOutputQuantity}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   plainDelegatedOutputOwner),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Vector Hs.ByteString)
                      @(HsProtobuf.UnpackedVec Hs.ByteString)
                      plainDelegatedOutputDelegatees)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   plainDelegatedOutputType),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   plainDelegatedOutputQuantity)])
        decodeMessage _
          = (Hs.pure PlainDelegatedOutput) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.ByteString))
                 @(_ (Hs.Vector Hs.ByteString))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "owner")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Repeated HsProtobuf.Bytes)
                (HsProtobuf.Single "delegatees")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "quantity")
                []
                "")]
 
instance HsJSONPB.ToJSONPB PlainDelegatedOutput where
        toJSONPB (PlainDelegatedOutput f1 f2 f3 f4)
          = (HsJSONPB.object
               ["owner" .= f1, "delegatees" .= f2, "type" .= f3,
                "quantity" .= f4])
        toEncodingPB (PlainDelegatedOutput f1 f2 f3 f4)
          = (HsJSONPB.pairs
               ["owner" .= f1, "delegatees" .= f2, "type" .= f3,
                "quantity" .= f4])
 
instance HsJSONPB.FromJSONPB PlainDelegatedOutput where
        parseJSONPB
          = (HsJSONPB.withObject "PlainDelegatedOutput"
               (\ obj ->
                  (Hs.pure PlainDelegatedOutput) <*> obj .: "owner" <*>
                    obj .: "delegatees"
                    <*> obj .: "type"
                    <*> obj .: "quantity"))
 
instance HsJSONPB.ToJSON PlainDelegatedOutput where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON PlainDelegatedOutput where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema PlainDelegatedOutput where
        declareNamedSchema _
          = do let declare_owner = HsJSONPB.declareSchemaRef
               plainDelegatedOutputOwner <- declare_owner Proxy.Proxy
               let declare_delegatees = HsJSONPB.declareSchemaRef
               plainDelegatedOutputDelegatees <- declare_delegatees Proxy.Proxy
               let declare_type = HsJSONPB.declareSchemaRef
               plainDelegatedOutputType <- declare_type Proxy.Proxy
               let declare_quantity = HsJSONPB.declareSchemaRef
               plainDelegatedOutputQuantity <- declare_quantity Proxy.Proxy
               let _ = Hs.pure PlainDelegatedOutput <*>
                         HsJSONPB.asProxy declare_owner
                         <*> HsJSONPB.asProxy declare_delegatees
                         <*> HsJSONPB.asProxy declare_type
                         <*> HsJSONPB.asProxy declare_quantity
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "PlainDelegatedOutput",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("owner", plainDelegatedOutputOwner),
                                                        ("delegatees",
                                                         plainDelegatedOutputDelegatees),
                                                        ("type", plainDelegatedOutputType),
                                                        ("quantity",
                                                         plainDelegatedOutputQuantity)]}})