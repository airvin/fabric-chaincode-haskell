{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!

module Token.Expectations where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Token.Transaction
import qualified Google.Protobuf.Timestamp
 
newtype TokenExpectation = TokenExpectation{tokenExpectationExpectation
                                            :: Hs.Maybe TokenExpectationExpectation}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TokenExpectation where
        nameOf _ = (Hs.fromString "TokenExpectation")
 
instance HsProtobuf.HasDefault TokenExpectation
 
instance HsProtobuf.Message TokenExpectation where
        encodeMessage _
          TokenExpectation{tokenExpectationExpectation =
                             tokenExpectationExpectation}
          = (Hs.mconcat
               [case tokenExpectationExpectation of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             TokenExpectationExpectationPlainExpectation y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Token.Expectations.PlainExpectation)
                                        @(HsProtobuf.Nested Token.Expectations.PlainExpectation)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure TokenExpectation) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap TokenExpectationExpectationPlainExpectation)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Token.Expectations.PlainExpectation))
                        @(_ (Hs.Maybe Token.Expectations.PlainExpectation))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB TokenExpectation where
        toJSONPB (TokenExpectation f1)
          = (HsJSONPB.object
               [(let encodeExpectation
                       = (case f1 of
                              Hs.Just (TokenExpectationExpectationPlainExpectation f1)
                                -> (HsJSONPB.pair "plain_expectation" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("Expectation" .=
                          (HsJSONPB.objectOrNull [encodeExpectation] options))
                         options
                       else encodeExpectation options)])
        toEncodingPB (TokenExpectation f1)
          = (HsJSONPB.pairs
               [(let encodeExpectation
                       = (case f1 of
                              Hs.Just (TokenExpectationExpectationPlainExpectation f1)
                                -> (HsJSONPB.pair "plain_expectation" f1)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("Expectation" .=
                          (HsJSONPB.pairsOrNull [encodeExpectation] options))
                         options
                       else encodeExpectation options)])
 
instance HsJSONPB.FromJSONPB TokenExpectation where
        parseJSONPB
          = (HsJSONPB.withObject "TokenExpectation"
               (\ obj ->
                  (Hs.pure TokenExpectation) <*>
                    (let parseExpectation parseObj
                           = Hs.msum
                               [Hs.Just Hs.. TokenExpectationExpectationPlainExpectation <$>
                                  (HsJSONPB.parseField parseObj "plain_expectation"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "Expectation") Hs.>>=
                          (HsJSONPB.withObject "Expectation" parseExpectation))
                         <|> (parseExpectation obj))))
 
instance HsJSONPB.ToJSON TokenExpectation where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON TokenExpectation where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema TokenExpectation where
        declareNamedSchema _
          = do let declare_Expectation = HsJSONPB.declareSchemaRef
               tokenExpectationExpectation <- declare_Expectation Proxy.Proxy
               let _ = Hs.pure TokenExpectation <*>
                         HsJSONPB.asProxy declare_Expectation
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TokenExpectation",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("Expectation",
                                                         tokenExpectationExpectation)]}})
 
data TokenExpectationExpectation = TokenExpectationExpectationPlainExpectation Token.Expectations.PlainExpectation
                                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named TokenExpectationExpectation where
        nameOf _ = (Hs.fromString "TokenExpectationExpectation")
 
instance HsJSONPB.ToSchema TokenExpectationExpectation where
        declareNamedSchema _
          = do let declare_plain_expectation = HsJSONPB.declareSchemaRef
               tokenExpectationExpectationPlainExpectation <- declare_plain_expectation
                                                                Proxy.Proxy
               let _ = Hs.pure TokenExpectationExpectationPlainExpectation <*>
                         HsJSONPB.asProxy declare_plain_expectation
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "TokenExpectationExpectation",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("plain_expectation",
                                                         tokenExpectationExpectationPlainExpectation)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype PlainExpectation = PlainExpectation{plainExpectationPayload
                                            :: Hs.Maybe PlainExpectationPayload}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named PlainExpectation where
        nameOf _ = (Hs.fromString "PlainExpectation")
 
instance HsProtobuf.HasDefault PlainExpectation
 
instance HsProtobuf.Message PlainExpectation where
        encodeMessage _
          PlainExpectation{plainExpectationPayload = plainExpectationPayload}
          = (Hs.mconcat
               [case plainExpectationPayload of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             PlainExpectationPayloadImportExpectation y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (Hs.coerce @(Hs.Maybe Token.Expectations.PlainTokenExpectation)
                                        @(HsProtobuf.Nested Token.Expectations.PlainTokenExpectation)
                                        (Hs.Just y)))
                             PlainExpectationPayloadTransferExpectation y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Token.Expectations.PlainTokenExpectation)
                                        @(HsProtobuf.Nested Token.Expectations.PlainTokenExpectation)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure PlainExpectation) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.fmap PlainExpectationPayloadImportExpectation)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Token.Expectations.PlainTokenExpectation))
                        @(_ (Hs.Maybe Token.Expectations.PlainTokenExpectation))
                        HsProtobuf.decodeMessageField)),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap PlainExpectationPayloadTransferExpectation)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Token.Expectations.PlainTokenExpectation))
                        @(_ (Hs.Maybe Token.Expectations.PlainTokenExpectation))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB PlainExpectation where
        toJSONPB (PlainExpectation f1_or_f2)
          = (HsJSONPB.object
               [(let encodePayload
                       = (case f1_or_f2 of
                              Hs.Just (PlainExpectationPayloadImportExpectation f1)
                                -> (HsJSONPB.pair "import_expectation" f1)
                              Hs.Just (PlainExpectationPayloadTransferExpectation f2)
                                -> (HsJSONPB.pair "transfer_expectation" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("payload" .= (HsJSONPB.objectOrNull [encodePayload] options))
                         options
                       else encodePayload options)])
        toEncodingPB (PlainExpectation f1_or_f2)
          = (HsJSONPB.pairs
               [(let encodePayload
                       = (case f1_or_f2 of
                              Hs.Just (PlainExpectationPayloadImportExpectation f1)
                                -> (HsJSONPB.pair "import_expectation" f1)
                              Hs.Just (PlainExpectationPayloadTransferExpectation f2)
                                -> (HsJSONPB.pair "transfer_expectation" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("payload" .= (HsJSONPB.pairsOrNull [encodePayload] options))
                         options
                       else encodePayload options)])
 
instance HsJSONPB.FromJSONPB PlainExpectation where
        parseJSONPB
          = (HsJSONPB.withObject "PlainExpectation"
               (\ obj ->
                  (Hs.pure PlainExpectation) <*>
                    (let parsePayload parseObj
                           = Hs.msum
                               [Hs.Just Hs.. PlainExpectationPayloadImportExpectation <$>
                                  (HsJSONPB.parseField parseObj "import_expectation"),
                                Hs.Just Hs.. PlainExpectationPayloadTransferExpectation <$>
                                  (HsJSONPB.parseField parseObj "transfer_expectation"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "payload") Hs.>>=
                          (HsJSONPB.withObject "payload" parsePayload))
                         <|> (parsePayload obj))))
 
instance HsJSONPB.ToJSON PlainExpectation where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON PlainExpectation where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema PlainExpectation where
        declareNamedSchema _
          = do let declare_payload = HsJSONPB.declareSchemaRef
               plainExpectationPayload <- declare_payload Proxy.Proxy
               let _ = Hs.pure PlainExpectation <*>
                         HsJSONPB.asProxy declare_payload
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "PlainExpectation",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("payload", plainExpectationPayload)]}})
 
data PlainExpectationPayload = PlainExpectationPayloadImportExpectation Token.Expectations.PlainTokenExpectation
                             | PlainExpectationPayloadTransferExpectation Token.Expectations.PlainTokenExpectation
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named PlainExpectationPayload where
        nameOf _ = (Hs.fromString "PlainExpectationPayload")
 
instance HsJSONPB.ToSchema PlainExpectationPayload where
        declareNamedSchema _
          = do let declare_import_expectation = HsJSONPB.declareSchemaRef
               plainExpectationPayloadImportExpectation <- declare_import_expectation
                                                             Proxy.Proxy
               let _ = Hs.pure PlainExpectationPayloadImportExpectation <*>
                         HsJSONPB.asProxy declare_import_expectation
               let declare_transfer_expectation = HsJSONPB.declareSchemaRef
               plainExpectationPayloadTransferExpectation <- declare_transfer_expectation
                                                               Proxy.Proxy
               let _ = Hs.pure PlainExpectationPayloadTransferExpectation <*>
                         HsJSONPB.asProxy declare_transfer_expectation
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "PlainExpectationPayload",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("import_expectation",
                                                         plainExpectationPayloadImportExpectation),
                                                        ("transfer_expectation",
                                                         plainExpectationPayloadTransferExpectation)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
newtype PlainTokenExpectation = PlainTokenExpectation{plainTokenExpectationOutputs
                                                      :: Hs.Vector Token.Transaction.PlainOutput}
                                deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named PlainTokenExpectation where
        nameOf _ = (Hs.fromString "PlainTokenExpectation")
 
instance HsProtobuf.HasDefault PlainTokenExpectation
 
instance HsProtobuf.Message PlainTokenExpectation where
        encodeMessage _
          PlainTokenExpectation{plainTokenExpectationOutputs =
                                  plainTokenExpectationOutputs}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Token.Transaction.PlainOutput)
                      @(HsProtobuf.NestedVec Token.Transaction.PlainOutput)
                      plainTokenExpectationOutputs))])
        decodeMessage _
          = (Hs.pure PlainTokenExpectation) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Token.Transaction.PlainOutput))
                 @(_ (Hs.Vector Token.Transaction.PlainOutput))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "PlainOutput")))
                (HsProtobuf.Single "outputs")
                []
                "")]
 
instance HsJSONPB.ToJSONPB PlainTokenExpectation where
        toJSONPB (PlainTokenExpectation f1)
          = (HsJSONPB.object ["outputs" .= f1])
        toEncodingPB (PlainTokenExpectation f1)
          = (HsJSONPB.pairs ["outputs" .= f1])
 
instance HsJSONPB.FromJSONPB PlainTokenExpectation where
        parseJSONPB
          = (HsJSONPB.withObject "PlainTokenExpectation"
               (\ obj -> (Hs.pure PlainTokenExpectation) <*> obj .: "outputs"))
 
instance HsJSONPB.ToJSON PlainTokenExpectation where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON PlainTokenExpectation where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema PlainTokenExpectation where
        declareNamedSchema _
          = do let declare_outputs = HsJSONPB.declareSchemaRef
               plainTokenExpectationOutputs <- declare_outputs Proxy.Proxy
               let _ = Hs.pure PlainTokenExpectation <*>
                         HsJSONPB.asProxy declare_outputs
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "PlainTokenExpectation",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("outputs",
                                                         plainTokenExpectationOutputs)]}})