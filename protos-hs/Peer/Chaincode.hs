{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE FlexibleInstances #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}
{-# OPTIONS_GHC -Wno-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-orphans #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!

module Peer.Chaincode where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
 
data ConfidentialityLevel = ConfidentialityLevelPUBLIC
                          | ConfidentialityLevelCONFIDENTIAL
                          deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ConfidentialityLevel where
        nameOf _ = (Hs.fromString "ConfidentialityLevel")
 
instance HsProtobuf.HasDefault ConfidentialityLevel
 
instance Hs.Bounded ConfidentialityLevel where
        minBound = ConfidentialityLevelPUBLIC
        maxBound = ConfidentialityLevelCONFIDENTIAL
 
instance Hs.Ord ConfidentialityLevel where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum ConfidentialityLevel where
        toProtoEnumMay 0 = Hs.Just ConfidentialityLevelPUBLIC
        toProtoEnumMay 1 = Hs.Just ConfidentialityLevelCONFIDENTIAL
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (ConfidentialityLevelPUBLIC) = 0
        fromProtoEnum (ConfidentialityLevelCONFIDENTIAL) = 1
 
instance HsJSONPB.ToJSONPB ConfidentialityLevel where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB ConfidentialityLevel where
        parseJSONPB (HsJSONPB.String "PUBLIC")
          = Hs.pure ConfidentialityLevelPUBLIC
        parseJSONPB (HsJSONPB.String "CONFIDENTIAL")
          = Hs.pure ConfidentialityLevelCONFIDENTIAL
        parseJSONPB v = (HsJSONPB.typeMismatch "ConfidentialityLevel" v)
 
instance HsJSONPB.ToJSON ConfidentialityLevel where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ConfidentialityLevel where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite ConfidentialityLevel
 
data ChaincodeID = ChaincodeID{chaincodeIDPath :: Hs.Text,
                               chaincodeIDName :: Hs.Text, chaincodeIDVersion :: Hs.Text}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ChaincodeID where
        nameOf _ = (Hs.fromString "ChaincodeID")
 
instance HsProtobuf.HasDefault ChaincodeID
 
instance HsProtobuf.Message ChaincodeID where
        encodeMessage _
          ChaincodeID{chaincodeIDPath = chaincodeIDPath,
                      chaincodeIDName = chaincodeIDName,
                      chaincodeIDVersion = chaincodeIDVersion}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   chaincodeIDPath),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   chaincodeIDName),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   chaincodeIDVersion)])
        decodeMessage _
          = (Hs.pure ChaincodeID) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "path")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "name")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "version")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ChaincodeID where
        toJSONPB (ChaincodeID f1 f2 f3)
          = (HsJSONPB.object ["path" .= f1, "name" .= f2, "version" .= f3])
        toEncodingPB (ChaincodeID f1 f2 f3)
          = (HsJSONPB.pairs ["path" .= f1, "name" .= f2, "version" .= f3])
 
instance HsJSONPB.FromJSONPB ChaincodeID where
        parseJSONPB
          = (HsJSONPB.withObject "ChaincodeID"
               (\ obj ->
                  (Hs.pure ChaincodeID) <*> obj .: "path" <*> obj .: "name" <*>
                    obj .: "version"))
 
instance HsJSONPB.ToJSON ChaincodeID where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ChaincodeID where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ChaincodeID where
        declareNamedSchema _
          = do let declare_path = HsJSONPB.declareSchemaRef
               chaincodeIDPath <- declare_path Proxy.Proxy
               let declare_name = HsJSONPB.declareSchemaRef
               chaincodeIDName <- declare_name Proxy.Proxy
               let declare_version = HsJSONPB.declareSchemaRef
               chaincodeIDVersion <- declare_version Proxy.Proxy
               let _ = Hs.pure ChaincodeID <*> HsJSONPB.asProxy declare_path <*>
                         HsJSONPB.asProxy declare_name
                         <*> HsJSONPB.asProxy declare_version
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ChaincodeID",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("path", chaincodeIDPath),
                                                        ("name", chaincodeIDName),
                                                        ("version", chaincodeIDVersion)]}})
 
data ChaincodeInput = ChaincodeInput{chaincodeInputArgs ::
                                     Hs.Vector Hs.ByteString,
                                     chaincodeInputDecorations :: Hs.Map Hs.Text Hs.ByteString}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ChaincodeInput where
        nameOf _ = (Hs.fromString "ChaincodeInput")
 
instance HsProtobuf.HasDefault ChaincodeInput
 
instance HsProtobuf.Message ChaincodeInput where
        encodeMessage _
          ChaincodeInput{chaincodeInputArgs = chaincodeInputArgs,
                         chaincodeInputDecorations = chaincodeInputDecorations}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Hs.ByteString)
                      @(HsProtobuf.UnpackedVec Hs.ByteString)
                      chaincodeInputArgs)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   chaincodeInputDecorations)])
        decodeMessage _
          = (Hs.pure ChaincodeInput) <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.ByteString))
                 @(_ (Hs.Vector Hs.ByteString))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated HsProtobuf.Bytes)
                (HsProtobuf.Single "args")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Map HsProtobuf.String HsProtobuf.Bytes)
                (HsProtobuf.Single "decorations")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ChaincodeInput where
        toJSONPB (ChaincodeInput f1 f2)
          = (HsJSONPB.object ["args" .= f1, "decorations" .= f2])
        toEncodingPB (ChaincodeInput f1 f2)
          = (HsJSONPB.pairs ["args" .= f1, "decorations" .= f2])
 
instance HsJSONPB.FromJSONPB ChaincodeInput where
        parseJSONPB
          = (HsJSONPB.withObject "ChaincodeInput"
               (\ obj ->
                  (Hs.pure ChaincodeInput) <*> obj .: "args" <*>
                    obj .: "decorations"))
 
instance HsJSONPB.ToJSON ChaincodeInput where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ChaincodeInput where
        parseJSON = HsJSONPB.parseJSONPB

instance {-# OVERLAPPING #-} HsJSONPB.ToSchema (HsJSONPB.OverrideToSchema (Hs.Map a Hs.ByteString)) where
  declareNamedSchema _ = Hs.return (HsJSONPB.NamedSchema Hs.Nothing Hs.mempty)

instance HsJSONPB.ToSchema ChaincodeInput where
        declareNamedSchema _
          = do let declare_args = HsJSONPB.declareSchemaRef
               chaincodeInputArgs <- declare_args Proxy.Proxy
               let declare_decorations = HsJSONPB.declareSchemaRef
               chaincodeInputDecorations <- declare_decorations Proxy.Proxy
               let _ = Hs.pure ChaincodeInput <*> HsJSONPB.asProxy declare_args
                         <*> HsJSONPB.asProxy declare_decorations
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ChaincodeInput",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("args", chaincodeInputArgs),
                                                        ("decorations",
                                                         chaincodeInputDecorations)]}})
 
data ChaincodeSpec = ChaincodeSpec{chaincodeSpecType ::
                                   HsProtobuf.Enumerated Peer.Chaincode.ChaincodeSpec_Type,
                                   chaincodeSpecChaincodeId :: Hs.Maybe Peer.Chaincode.ChaincodeID,
                                   chaincodeSpecInput :: Hs.Maybe Peer.Chaincode.ChaincodeInput,
                                   chaincodeSpecTimeout :: Hs.Int32}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ChaincodeSpec where
        nameOf _ = (Hs.fromString "ChaincodeSpec")
 
instance HsProtobuf.HasDefault ChaincodeSpec
 
instance HsProtobuf.Message ChaincodeSpec where
        encodeMessage _
          ChaincodeSpec{chaincodeSpecType = chaincodeSpecType,
                        chaincodeSpecChaincodeId = chaincodeSpecChaincodeId,
                        chaincodeSpecInput = chaincodeSpecInput,
                        chaincodeSpecTimeout = chaincodeSpecTimeout}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   chaincodeSpecType),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Peer.Chaincode.ChaincodeID)
                      @(HsProtobuf.Nested Peer.Chaincode.ChaincodeID)
                      chaincodeSpecChaincodeId)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Maybe Peer.Chaincode.ChaincodeInput)
                      @(HsProtobuf.Nested Peer.Chaincode.ChaincodeInput)
                      chaincodeSpecInput)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   chaincodeSpecTimeout)])
        decodeMessage _
          = (Hs.pure ChaincodeSpec) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Peer.Chaincode.ChaincodeID))
                 @(_ (Hs.Maybe Peer.Chaincode.ChaincodeID))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Peer.Chaincode.ChaincodeInput))
                 @(_ (Hs.Maybe Peer.Chaincode.ChaincodeInput))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ChaincodeID")))
                (HsProtobuf.Single "chaincode_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ChaincodeInput")))
                (HsProtobuf.Single "input")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "timeout")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ChaincodeSpec where
        toJSONPB (ChaincodeSpec f1 f2 f3 f4)
          = (HsJSONPB.object
               ["type" .= f1, "chaincode_id" .= f2, "input" .= f3,
                "timeout" .= f4])
        toEncodingPB (ChaincodeSpec f1 f2 f3 f4)
          = (HsJSONPB.pairs
               ["type" .= f1, "chaincode_id" .= f2, "input" .= f3,
                "timeout" .= f4])
 
instance HsJSONPB.FromJSONPB ChaincodeSpec where
        parseJSONPB
          = (HsJSONPB.withObject "ChaincodeSpec"
               (\ obj ->
                  (Hs.pure ChaincodeSpec) <*> obj .: "type" <*> obj .: "chaincode_id"
                    <*> obj .: "input"
                    <*> obj .: "timeout"))
 
instance HsJSONPB.ToJSON ChaincodeSpec where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ChaincodeSpec where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ChaincodeSpec where
        declareNamedSchema _
          = do let declare_type = HsJSONPB.declareSchemaRef
               chaincodeSpecType <- declare_type Proxy.Proxy
               let declare_chaincode_id = HsJSONPB.declareSchemaRef
               chaincodeSpecChaincodeId <- declare_chaincode_id Proxy.Proxy
               let declare_input = HsJSONPB.declareSchemaRef
               chaincodeSpecInput <- declare_input Proxy.Proxy
               let declare_timeout = HsJSONPB.declareSchemaRef
               chaincodeSpecTimeout <- declare_timeout Proxy.Proxy
               let _ = Hs.pure ChaincodeSpec <*> HsJSONPB.asProxy declare_type <*>
                         HsJSONPB.asProxy declare_chaincode_id
                         <*> HsJSONPB.asProxy declare_input
                         <*> HsJSONPB.asProxy declare_timeout
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ChaincodeSpec",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("type", chaincodeSpecType),
                                                        ("chaincode_id", chaincodeSpecChaincodeId),
                                                        ("input", chaincodeSpecInput),
                                                        ("timeout", chaincodeSpecTimeout)]}})
 
data ChaincodeSpec_Type = ChaincodeSpec_TypeUNDEFINED
                        | ChaincodeSpec_TypeGOLANG
                        | ChaincodeSpec_TypeNODE
                        | ChaincodeSpec_TypeCAR
                        | ChaincodeSpec_TypeJAVA
                        deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ChaincodeSpec_Type where
        nameOf _ = (Hs.fromString "ChaincodeSpec_Type")
 
instance HsProtobuf.HasDefault ChaincodeSpec_Type
 
instance Hs.Bounded ChaincodeSpec_Type where
        minBound = ChaincodeSpec_TypeUNDEFINED
        maxBound = ChaincodeSpec_TypeJAVA
 
instance Hs.Ord ChaincodeSpec_Type where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum ChaincodeSpec_Type where
        toProtoEnumMay 0 = Hs.Just ChaincodeSpec_TypeUNDEFINED
        toProtoEnumMay 1 = Hs.Just ChaincodeSpec_TypeGOLANG
        toProtoEnumMay 2 = Hs.Just ChaincodeSpec_TypeNODE
        toProtoEnumMay 3 = Hs.Just ChaincodeSpec_TypeCAR
        toProtoEnumMay 4 = Hs.Just ChaincodeSpec_TypeJAVA
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (ChaincodeSpec_TypeUNDEFINED) = 0
        fromProtoEnum (ChaincodeSpec_TypeGOLANG) = 1
        fromProtoEnum (ChaincodeSpec_TypeNODE) = 2
        fromProtoEnum (ChaincodeSpec_TypeCAR) = 3
        fromProtoEnum (ChaincodeSpec_TypeJAVA) = 4
 
instance HsJSONPB.ToJSONPB ChaincodeSpec_Type where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB ChaincodeSpec_Type where
        parseJSONPB (HsJSONPB.String "UNDEFINED")
          = Hs.pure ChaincodeSpec_TypeUNDEFINED
        parseJSONPB (HsJSONPB.String "GOLANG")
          = Hs.pure ChaincodeSpec_TypeGOLANG
        parseJSONPB (HsJSONPB.String "NODE")
          = Hs.pure ChaincodeSpec_TypeNODE
        parseJSONPB (HsJSONPB.String "CAR") = Hs.pure ChaincodeSpec_TypeCAR
        parseJSONPB (HsJSONPB.String "JAVA")
          = Hs.pure ChaincodeSpec_TypeJAVA
        parseJSONPB v = (HsJSONPB.typeMismatch "ChaincodeSpec_Type" v)
 
instance HsJSONPB.ToJSON ChaincodeSpec_Type where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ChaincodeSpec_Type where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite ChaincodeSpec_Type
 
data ChaincodeDeploymentSpec = ChaincodeDeploymentSpec{chaincodeDeploymentSpecChaincodeSpec
                                                       :: Hs.Maybe Peer.Chaincode.ChaincodeSpec,
                                                       chaincodeDeploymentSpecCodePackage ::
                                                       Hs.ByteString,
                                                       chaincodeDeploymentSpecExecEnv ::
                                                       HsProtobuf.Enumerated
                                                         Peer.Chaincode.ChaincodeDeploymentSpec_ExecutionEnvironment}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ChaincodeDeploymentSpec where
        nameOf _ = (Hs.fromString "ChaincodeDeploymentSpec")
 
instance HsProtobuf.HasDefault ChaincodeDeploymentSpec
 
instance HsProtobuf.Message ChaincodeDeploymentSpec where
        encodeMessage _
          ChaincodeDeploymentSpec{chaincodeDeploymentSpecChaincodeSpec =
                                    chaincodeDeploymentSpecChaincodeSpec,
                                  chaincodeDeploymentSpecCodePackage =
                                    chaincodeDeploymentSpecCodePackage,
                                  chaincodeDeploymentSpecExecEnv = chaincodeDeploymentSpecExecEnv}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Peer.Chaincode.ChaincodeSpec)
                      @(HsProtobuf.Nested Peer.Chaincode.ChaincodeSpec)
                      chaincodeDeploymentSpecChaincodeSpec)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   chaincodeDeploymentSpecCodePackage),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   chaincodeDeploymentSpecExecEnv)])
        decodeMessage _
          = (Hs.pure ChaincodeDeploymentSpec) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Peer.Chaincode.ChaincodeSpec))
                 @(_ (Hs.Maybe Peer.Chaincode.ChaincodeSpec))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ChaincodeSpec")))
                (HsProtobuf.Single "chaincode_spec")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "code_package")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ExecutionEnvironment")))
                (HsProtobuf.Single "exec_env")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ChaincodeDeploymentSpec where
        toJSONPB (ChaincodeDeploymentSpec f1 f3 f4)
          = (HsJSONPB.object
               ["chaincode_spec" .= f1, "code_package" .= f3, "exec_env" .= f4])
        toEncodingPB (ChaincodeDeploymentSpec f1 f3 f4)
          = (HsJSONPB.pairs
               ["chaincode_spec" .= f1, "code_package" .= f3, "exec_env" .= f4])
 
instance HsJSONPB.FromJSONPB ChaincodeDeploymentSpec where
        parseJSONPB
          = (HsJSONPB.withObject "ChaincodeDeploymentSpec"
               (\ obj ->
                  (Hs.pure ChaincodeDeploymentSpec) <*> obj .: "chaincode_spec" <*>
                    obj .: "code_package"
                    <*> obj .: "exec_env"))
 
instance HsJSONPB.ToJSON ChaincodeDeploymentSpec where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ChaincodeDeploymentSpec where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ChaincodeDeploymentSpec where
        declareNamedSchema _
          = do let declare_chaincode_spec = HsJSONPB.declareSchemaRef
               chaincodeDeploymentSpecChaincodeSpec <- declare_chaincode_spec
                                                         Proxy.Proxy
               let declare_code_package = HsJSONPB.declareSchemaRef
               chaincodeDeploymentSpecCodePackage <- declare_code_package
                                                       Proxy.Proxy
               let declare_exec_env = HsJSONPB.declareSchemaRef
               chaincodeDeploymentSpecExecEnv <- declare_exec_env Proxy.Proxy
               let _ = Hs.pure ChaincodeDeploymentSpec <*>
                         HsJSONPB.asProxy declare_chaincode_spec
                         <*> HsJSONPB.asProxy declare_code_package
                         <*> HsJSONPB.asProxy declare_exec_env
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ChaincodeDeploymentSpec",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("chaincode_spec",
                                                         chaincodeDeploymentSpecChaincodeSpec),
                                                        ("code_package",
                                                         chaincodeDeploymentSpecCodePackage),
                                                        ("exec_env",
                                                         chaincodeDeploymentSpecExecEnv)]}})
 
data ChaincodeDeploymentSpec_ExecutionEnvironment = ChaincodeDeploymentSpec_ExecutionEnvironmentDOCKER
                                                  | ChaincodeDeploymentSpec_ExecutionEnvironmentSYSTEM
                                                  deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named
         ChaincodeDeploymentSpec_ExecutionEnvironment where
        nameOf _
          = (Hs.fromString "ChaincodeDeploymentSpec_ExecutionEnvironment")
 
instance HsProtobuf.HasDefault
         ChaincodeDeploymentSpec_ExecutionEnvironment
 
instance Hs.Bounded ChaincodeDeploymentSpec_ExecutionEnvironment
         where
        minBound = ChaincodeDeploymentSpec_ExecutionEnvironmentDOCKER
        maxBound = ChaincodeDeploymentSpec_ExecutionEnvironmentSYSTEM
 
instance Hs.Ord ChaincodeDeploymentSpec_ExecutionEnvironment where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum
         ChaincodeDeploymentSpec_ExecutionEnvironment where
        toProtoEnumMay 0
          = Hs.Just ChaincodeDeploymentSpec_ExecutionEnvironmentDOCKER
        toProtoEnumMay 1
          = Hs.Just ChaincodeDeploymentSpec_ExecutionEnvironmentSYSTEM
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (ChaincodeDeploymentSpec_ExecutionEnvironmentDOCKER)
          = 0
        fromProtoEnum (ChaincodeDeploymentSpec_ExecutionEnvironmentSYSTEM)
          = 1
 
instance HsJSONPB.ToJSONPB
         ChaincodeDeploymentSpec_ExecutionEnvironment where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB
         ChaincodeDeploymentSpec_ExecutionEnvironment where
        parseJSONPB (HsJSONPB.String "DOCKER")
          = Hs.pure ChaincodeDeploymentSpec_ExecutionEnvironmentDOCKER
        parseJSONPB (HsJSONPB.String "SYSTEM")
          = Hs.pure ChaincodeDeploymentSpec_ExecutionEnvironmentSYSTEM
        parseJSONPB v
          = (HsJSONPB.typeMismatch
               "ChaincodeDeploymentSpec_ExecutionEnvironment"
               v)
 
instance HsJSONPB.ToJSON
         ChaincodeDeploymentSpec_ExecutionEnvironment where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON
         ChaincodeDeploymentSpec_ExecutionEnvironment where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite
         ChaincodeDeploymentSpec_ExecutionEnvironment
 
newtype ChaincodeInvocationSpec = ChaincodeInvocationSpec{chaincodeInvocationSpecChaincodeSpec
                                                          :: Hs.Maybe Peer.Chaincode.ChaincodeSpec}
                                  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ChaincodeInvocationSpec where
        nameOf _ = (Hs.fromString "ChaincodeInvocationSpec")
 
instance HsProtobuf.HasDefault ChaincodeInvocationSpec
 
instance HsProtobuf.Message ChaincodeInvocationSpec where
        encodeMessage _
          ChaincodeInvocationSpec{chaincodeInvocationSpecChaincodeSpec =
                                    chaincodeInvocationSpecChaincodeSpec}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Peer.Chaincode.ChaincodeSpec)
                      @(HsProtobuf.Nested Peer.Chaincode.ChaincodeSpec)
                      chaincodeInvocationSpecChaincodeSpec))])
        decodeMessage _
          = (Hs.pure ChaincodeInvocationSpec) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Peer.Chaincode.ChaincodeSpec))
                 @(_ (Hs.Maybe Peer.Chaincode.ChaincodeSpec))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ChaincodeSpec")))
                (HsProtobuf.Single "chaincode_spec")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ChaincodeInvocationSpec where
        toJSONPB (ChaincodeInvocationSpec f1)
          = (HsJSONPB.object ["chaincode_spec" .= f1])
        toEncodingPB (ChaincodeInvocationSpec f1)
          = (HsJSONPB.pairs ["chaincode_spec" .= f1])
 
instance HsJSONPB.FromJSONPB ChaincodeInvocationSpec where
        parseJSONPB
          = (HsJSONPB.withObject "ChaincodeInvocationSpec"
               (\ obj ->
                  (Hs.pure ChaincodeInvocationSpec) <*> obj .: "chaincode_spec"))
 
instance HsJSONPB.ToJSON ChaincodeInvocationSpec where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ChaincodeInvocationSpec where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ChaincodeInvocationSpec where
        declareNamedSchema _
          = do let declare_chaincode_spec = HsJSONPB.declareSchemaRef
               chaincodeInvocationSpecChaincodeSpec <- declare_chaincode_spec
                                                         Proxy.Proxy
               let _ = Hs.pure ChaincodeInvocationSpec <*>
                         HsJSONPB.asProxy declare_chaincode_spec
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ChaincodeInvocationSpec",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("chaincode_spec",
                                                         chaincodeInvocationSpecChaincodeSpec)]}})
 
newtype LifecycleEvent = LifecycleEvent{lifecycleEventChaincodeName
                                        :: Hs.Text}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LifecycleEvent where
        nameOf _ = (Hs.fromString "LifecycleEvent")
 
instance HsProtobuf.HasDefault LifecycleEvent
 
instance HsProtobuf.Message LifecycleEvent where
        encodeMessage _
          LifecycleEvent{lifecycleEventChaincodeName =
                           lifecycleEventChaincodeName}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   lifecycleEventChaincodeName)])
        decodeMessage _
          = (Hs.pure LifecycleEvent) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "chaincode_name")
                []
                "")]
 
instance HsJSONPB.ToJSONPB LifecycleEvent where
        toJSONPB (LifecycleEvent f1)
          = (HsJSONPB.object ["chaincode_name" .= f1])
        toEncodingPB (LifecycleEvent f1)
          = (HsJSONPB.pairs ["chaincode_name" .= f1])
 
instance HsJSONPB.FromJSONPB LifecycleEvent where
        parseJSONPB
          = (HsJSONPB.withObject "LifecycleEvent"
               (\ obj -> (Hs.pure LifecycleEvent) <*> obj .: "chaincode_name"))
 
instance HsJSONPB.ToJSON LifecycleEvent where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LifecycleEvent where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LifecycleEvent where
        declareNamedSchema _
          = do let declare_chaincode_name = HsJSONPB.declareSchemaRef
               lifecycleEventChaincodeName <- declare_chaincode_name Proxy.Proxy
               let _ = Hs.pure LifecycleEvent <*>
                         HsJSONPB.asProxy declare_chaincode_name
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LifecycleEvent",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("chaincode_name",
                                                         lifecycleEventChaincodeName)]}})