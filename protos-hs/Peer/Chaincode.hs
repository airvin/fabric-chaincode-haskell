{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Peer.Chaincode where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Common.Policies

data ChaincodeID = ChaincodeID{chaincodeIDPath :: Hs.Text,
                               chaincodeIDName :: Hs.Text, chaincodeIDVersion :: Hs.Text}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChaincodeID where
        nameOf _ = (Hs.fromString "ChaincodeID")

instance HsProtobuf.HasDefault ChaincodeID

instance HsProtobuf.Message ChaincodeID where
        encodeMessage _
          ChaincodeID{chaincodeIDPath = chaincodeIDPath,
                      chaincodeIDName = chaincodeIDName,
                      chaincodeIDVersion = chaincodeIDVersion}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   chaincodeIDPath),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   chaincodeIDName),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   chaincodeIDVersion)])
        decodeMessage _
          = (Hs.pure ChaincodeID) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "path")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "name")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "version")
                []
                "")]

instance HsJSONPB.ToJSONPB ChaincodeID where
        toJSONPB (ChaincodeID f1 f2 f3)
          = (HsJSONPB.object ["path" .= f1, "name" .= f2, "version" .= f3])
        toEncodingPB (ChaincodeID f1 f2 f3)
          = (HsJSONPB.pairs ["path" .= f1, "name" .= f2, "version" .= f3])

instance HsJSONPB.FromJSONPB ChaincodeID where
        parseJSONPB
          = (HsJSONPB.withObject "ChaincodeID"
               (\ obj ->
                  (Hs.pure ChaincodeID) <*> obj .: "path" <*> obj .: "name" <*>
                    obj .: "version"))

instance HsJSONPB.ToJSON ChaincodeID where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ChaincodeID where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema ChaincodeID where
        declareNamedSchema _
          = do let declare_path = HsJSONPB.declareSchemaRef
               chaincodeIDPath <- declare_path Proxy.Proxy
               let declare_name = HsJSONPB.declareSchemaRef
               chaincodeIDName <- declare_name Proxy.Proxy
               let declare_version = HsJSONPB.declareSchemaRef
               chaincodeIDVersion <- declare_version Proxy.Proxy
               let _ = Hs.pure ChaincodeID <*> HsJSONPB.asProxy declare_path <*>
                         HsJSONPB.asProxy declare_name
                         <*> HsJSONPB.asProxy declare_version
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ChaincodeID",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("path", chaincodeIDPath),
                                                        ("name", chaincodeIDName),
                                                        ("version", chaincodeIDVersion)]}})

data ChaincodeInput = ChaincodeInput{chaincodeInputArgs ::
                                     Hs.Vector Hs.ByteString,
                                     chaincodeInputDecorations :: Hs.Map Hs.Text Hs.ByteString,
                                     chaincodeInputIsInit :: Hs.Bool}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChaincodeInput where
        nameOf _ = (Hs.fromString "ChaincodeInput")

instance HsProtobuf.HasDefault ChaincodeInput

instance HsProtobuf.Message ChaincodeInput where
        encodeMessage _
          ChaincodeInput{chaincodeInputArgs = chaincodeInputArgs,
                         chaincodeInputDecorations = chaincodeInputDecorations,
                         chaincodeInputIsInit = chaincodeInputIsInit}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Hs.ByteString)
                      @(HsProtobuf.UnpackedVec Hs.ByteString)
                      chaincodeInputArgs)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   chaincodeInputDecorations),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   chaincodeInputIsInit)])
        decodeMessage _
          = (Hs.pure ChaincodeInput) <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.ByteString))
                 @(_ (Hs.Vector Hs.ByteString))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated HsProtobuf.Bytes)
                (HsProtobuf.Single "args")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Map HsProtobuf.String HsProtobuf.Bytes)
                (HsProtobuf.Single "decorations")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "is_init")
                []
                "")]

instance HsJSONPB.ToJSONPB ChaincodeInput where
        toJSONPB (ChaincodeInput f1 f2 f3)
          = (HsJSONPB.object
               ["args" .= f1, "decorations" .= f2, "is_init" .= f3])
        toEncodingPB (ChaincodeInput f1 f2 f3)
          = (HsJSONPB.pairs
               ["args" .= f1, "decorations" .= f2, "is_init" .= f3])

instance HsJSONPB.FromJSONPB ChaincodeInput where
        parseJSONPB
          = (HsJSONPB.withObject "ChaincodeInput"
               (\ obj ->
                  (Hs.pure ChaincodeInput) <*> obj .: "args" <*> obj .: "decorations"
                    <*> obj .: "is_init"))

instance HsJSONPB.ToJSON ChaincodeInput where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ChaincodeInput where
        parseJSON = HsJSONPB.parseJSONPB

-- instance HsJSONPB.ToSchema ChaincodeInput where
--         declareNamedSchema _
--           = do let declare_args = HsJSONPB.declareSchemaRef
--                chaincodeInputArgs <- declare_args Proxy.Proxy
--                let declare_decorations = HsJSONPB.declareSchemaRef
--                chaincodeInputDecorations <- declare_decorations Proxy.Proxy
--                let declare_is_init = HsJSONPB.declareSchemaRef
--                chaincodeInputIsInit <- declare_is_init Proxy.Proxy
--                let _ = Hs.pure ChaincodeInput <*> HsJSONPB.asProxy declare_args
--                          <*> HsJSONPB.asProxy declare_decorations
--                          <*> HsJSONPB.asProxy declare_is_init
--                Hs.return
--                  (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
--                                          Hs.Just "ChaincodeInput",
--                                        HsJSONPB._namedSchemaSchema =
--                                          Hs.mempty{HsJSONPB._schemaParamSchema =
--                                                      Hs.mempty{HsJSONPB._paramSchemaType =
--                                                                  Hs.Just HsJSONPB.SwaggerObject},
--                                                    HsJSONPB._schemaProperties =
--                                                      HsJSONPB.insOrdFromList
--                                                        [("args", chaincodeInputArgs),
--                                                         ("decorations", chaincodeInputDecorations),
--                                                         ("is_init", chaincodeInputIsInit)]}})

data ChaincodeSpec = ChaincodeSpec{chaincodeSpecType ::
                                   HsProtobuf.Enumerated Peer.Chaincode.ChaincodeSpec_Type,
                                   chaincodeSpecChaincodeId :: Hs.Maybe Peer.Chaincode.ChaincodeID,
                                   chaincodeSpecInput :: Hs.Maybe Peer.Chaincode.ChaincodeInput,
                                   chaincodeSpecTimeout :: Hs.Int32}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChaincodeSpec where
        nameOf _ = (Hs.fromString "ChaincodeSpec")

instance HsProtobuf.HasDefault ChaincodeSpec

instance HsProtobuf.Message ChaincodeSpec where
        encodeMessage _
          ChaincodeSpec{chaincodeSpecType = chaincodeSpecType,
                        chaincodeSpecChaincodeId = chaincodeSpecChaincodeId,
                        chaincodeSpecInput = chaincodeSpecInput,
                        chaincodeSpecTimeout = chaincodeSpecTimeout}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   chaincodeSpecType),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Peer.Chaincode.ChaincodeID)
                      @(HsProtobuf.Nested Peer.Chaincode.ChaincodeID)
                      chaincodeSpecChaincodeId)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Maybe Peer.Chaincode.ChaincodeInput)
                      @(HsProtobuf.Nested Peer.Chaincode.ChaincodeInput)
                      chaincodeSpecInput)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   chaincodeSpecTimeout)])
        decodeMessage _
          = (Hs.pure ChaincodeSpec) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Peer.Chaincode.ChaincodeID))
                 @(_ (Hs.Maybe Peer.Chaincode.ChaincodeID))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Peer.Chaincode.ChaincodeInput))
                 @(_ (Hs.Maybe Peer.Chaincode.ChaincodeInput))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ChaincodeID")))
                (HsProtobuf.Single "chaincode_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ChaincodeInput")))
                (HsProtobuf.Single "input")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "timeout")
                []
                "")]

instance HsJSONPB.ToJSONPB ChaincodeSpec where
        toJSONPB (ChaincodeSpec f1 f2 f3 f4)
          = (HsJSONPB.object
               ["type" .= f1, "chaincode_id" .= f2, "input" .= f3,
                "timeout" .= f4])
        toEncodingPB (ChaincodeSpec f1 f2 f3 f4)
          = (HsJSONPB.pairs
               ["type" .= f1, "chaincode_id" .= f2, "input" .= f3,
                "timeout" .= f4])

instance HsJSONPB.FromJSONPB ChaincodeSpec where
        parseJSONPB
          = (HsJSONPB.withObject "ChaincodeSpec"
               (\ obj ->
                  (Hs.pure ChaincodeSpec) <*> obj .: "type" <*> obj .: "chaincode_id"
                    <*> obj .: "input"
                    <*> obj .: "timeout"))

instance HsJSONPB.ToJSON ChaincodeSpec where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ChaincodeSpec where
        parseJSON = HsJSONPB.parseJSONPB

-- instance HsJSONPB.ToSchema ChaincodeSpec where
--         declareNamedSchema _
--           = do let declare_type = HsJSONPB.declareSchemaRef
--                chaincodeSpecType <- declare_type Proxy.Proxy
--                let declare_chaincode_id = HsJSONPB.declareSchemaRef
--                chaincodeSpecChaincodeId <- declare_chaincode_id Proxy.Proxy
--                let declare_input = HsJSONPB.declareSchemaRef
--                chaincodeSpecInput <- declare_input Proxy.Proxy
--                let declare_timeout = HsJSONPB.declareSchemaRef
--                chaincodeSpecTimeout <- declare_timeout Proxy.Proxy
--                let _ = Hs.pure ChaincodeSpec <*> HsJSONPB.asProxy declare_type <*>
--                          HsJSONPB.asProxy declare_chaincode_id
--                          <*> HsJSONPB.asProxy declare_input
--                          <*> HsJSONPB.asProxy declare_timeout
--                Hs.return
--                  (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
--                                          Hs.Just "ChaincodeSpec",
--                                        HsJSONPB._namedSchemaSchema =
--                                          Hs.mempty{HsJSONPB._schemaParamSchema =
--                                                      Hs.mempty{HsJSONPB._paramSchemaType =
--                                                                  Hs.Just HsJSONPB.SwaggerObject},
--                                                    HsJSONPB._schemaProperties =
--                                                      HsJSONPB.insOrdFromList
--                                                        [("type", chaincodeSpecType),
--                                                         ("chaincode_id", chaincodeSpecChaincodeId),
--                                                         ("input", chaincodeSpecInput),
--                                                         ("timeout", chaincodeSpecTimeout)]}})

data ChaincodeSpec_Type = ChaincodeSpec_TypeUNDEFINED
                        | ChaincodeSpec_TypeGOLANG
                        | ChaincodeSpec_TypeNODE
                        | ChaincodeSpec_TypeCAR
                        | ChaincodeSpec_TypeJAVA
                        deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChaincodeSpec_Type where
        nameOf _ = (Hs.fromString "ChaincodeSpec_Type")

instance HsProtobuf.HasDefault ChaincodeSpec_Type

instance Hs.Bounded ChaincodeSpec_Type where
        minBound = ChaincodeSpec_TypeUNDEFINED
        maxBound = ChaincodeSpec_TypeJAVA

instance Hs.Ord ChaincodeSpec_Type where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)

instance HsProtobuf.ProtoEnum ChaincodeSpec_Type where
        toProtoEnumMay 0 = Hs.Just ChaincodeSpec_TypeUNDEFINED
        toProtoEnumMay 1 = Hs.Just ChaincodeSpec_TypeGOLANG
        toProtoEnumMay 2 = Hs.Just ChaincodeSpec_TypeNODE
        toProtoEnumMay 3 = Hs.Just ChaincodeSpec_TypeCAR
        toProtoEnumMay 4 = Hs.Just ChaincodeSpec_TypeJAVA
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (ChaincodeSpec_TypeUNDEFINED) = 0
        fromProtoEnum (ChaincodeSpec_TypeGOLANG) = 1
        fromProtoEnum (ChaincodeSpec_TypeNODE) = 2
        fromProtoEnum (ChaincodeSpec_TypeCAR) = 3
        fromProtoEnum (ChaincodeSpec_TypeJAVA) = 4

instance HsJSONPB.ToJSONPB ChaincodeSpec_Type where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x

instance HsJSONPB.FromJSONPB ChaincodeSpec_Type where
        parseJSONPB (HsJSONPB.String "UNDEFINED")
          = Hs.pure ChaincodeSpec_TypeUNDEFINED
        parseJSONPB (HsJSONPB.String "GOLANG")
          = Hs.pure ChaincodeSpec_TypeGOLANG
        parseJSONPB (HsJSONPB.String "NODE")
          = Hs.pure ChaincodeSpec_TypeNODE
        parseJSONPB (HsJSONPB.String "CAR") = Hs.pure ChaincodeSpec_TypeCAR
        parseJSONPB (HsJSONPB.String "JAVA")
          = Hs.pure ChaincodeSpec_TypeJAVA
        parseJSONPB v = (HsJSONPB.typeMismatch "ChaincodeSpec_Type" v)

instance HsJSONPB.ToJSON ChaincodeSpec_Type where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ChaincodeSpec_Type where
        parseJSON = HsJSONPB.parseJSONPB

instance HsProtobuf.Finite ChaincodeSpec_Type

data ChaincodeDeploymentSpec = ChaincodeDeploymentSpec{chaincodeDeploymentSpecChaincodeSpec
                                                       :: Hs.Maybe Peer.Chaincode.ChaincodeSpec,
                                                       chaincodeDeploymentSpecCodePackage ::
                                                       Hs.ByteString}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChaincodeDeploymentSpec where
        nameOf _ = (Hs.fromString "ChaincodeDeploymentSpec")

instance HsProtobuf.HasDefault ChaincodeDeploymentSpec

instance HsProtobuf.Message ChaincodeDeploymentSpec where
        encodeMessage _
          ChaincodeDeploymentSpec{chaincodeDeploymentSpecChaincodeSpec =
                                    chaincodeDeploymentSpecChaincodeSpec,
                                  chaincodeDeploymentSpecCodePackage =
                                    chaincodeDeploymentSpecCodePackage}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Peer.Chaincode.ChaincodeSpec)
                      @(HsProtobuf.Nested Peer.Chaincode.ChaincodeSpec)
                      chaincodeDeploymentSpecChaincodeSpec)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   chaincodeDeploymentSpecCodePackage)])
        decodeMessage _
          = (Hs.pure ChaincodeDeploymentSpec) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Peer.Chaincode.ChaincodeSpec))
                 @(_ (Hs.Maybe Peer.Chaincode.ChaincodeSpec))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ChaincodeSpec")))
                (HsProtobuf.Single "chaincode_spec")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "code_package")
                []
                "")]

instance HsJSONPB.ToJSONPB ChaincodeDeploymentSpec where
        toJSONPB (ChaincodeDeploymentSpec f1 f3)
          = (HsJSONPB.object ["chaincode_spec" .= f1, "code_package" .= f3])
        toEncodingPB (ChaincodeDeploymentSpec f1 f3)
          = (HsJSONPB.pairs ["chaincode_spec" .= f1, "code_package" .= f3])

instance HsJSONPB.FromJSONPB ChaincodeDeploymentSpec where
        parseJSONPB
          = (HsJSONPB.withObject "ChaincodeDeploymentSpec"
               (\ obj ->
                  (Hs.pure ChaincodeDeploymentSpec) <*> obj .: "chaincode_spec" <*>
                    obj .: "code_package"))

instance HsJSONPB.ToJSON ChaincodeDeploymentSpec where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ChaincodeDeploymentSpec where
        parseJSON = HsJSONPB.parseJSONPB

-- instance HsJSONPB.ToSchema ChaincodeDeploymentSpec where
--         declareNamedSchema _
--           = do let declare_chaincode_spec = HsJSONPB.declareSchemaRef
--                chaincodeDeploymentSpecChaincodeSpec <- declare_chaincode_spec
--                                                          Proxy.Proxy
--                let declare_code_package = HsJSONPB.declareSchemaRef
--                chaincodeDeploymentSpecCodePackage <- declare_code_package
--                                                        Proxy.Proxy
--                let _ = Hs.pure ChaincodeDeploymentSpec <*>
--                          HsJSONPB.asProxy declare_chaincode_spec
--                          <*> HsJSONPB.asProxy declare_code_package
--                Hs.return
--                  (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
--                                          Hs.Just "ChaincodeDeploymentSpec",
--                                        HsJSONPB._namedSchemaSchema =
--                                          Hs.mempty{HsJSONPB._schemaParamSchema =
--                                                      Hs.mempty{HsJSONPB._paramSchemaType =
--                                                                  Hs.Just HsJSONPB.SwaggerObject},
--                                                    HsJSONPB._schemaProperties =
--                                                      HsJSONPB.insOrdFromList
--                                                        [("chaincode_spec",
--                                                          chaincodeDeploymentSpecChaincodeSpec),
--                                                         ("code_package",
--                                                          chaincodeDeploymentSpecCodePackage)]}})

data ChaincodeInvocationSpec = ChaincodeInvocationSpec{chaincodeInvocationSpecChaincodeSpec
                                                       :: Hs.Maybe Peer.Chaincode.ChaincodeSpec}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChaincodeInvocationSpec where
        nameOf _ = (Hs.fromString "ChaincodeInvocationSpec")

instance HsProtobuf.HasDefault ChaincodeInvocationSpec

instance HsProtobuf.Message ChaincodeInvocationSpec where
        encodeMessage _
          ChaincodeInvocationSpec{chaincodeInvocationSpecChaincodeSpec =
                                    chaincodeInvocationSpecChaincodeSpec}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Peer.Chaincode.ChaincodeSpec)
                      @(HsProtobuf.Nested Peer.Chaincode.ChaincodeSpec)
                      chaincodeInvocationSpecChaincodeSpec))])
        decodeMessage _
          = (Hs.pure ChaincodeInvocationSpec) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Peer.Chaincode.ChaincodeSpec))
                 @(_ (Hs.Maybe Peer.Chaincode.ChaincodeSpec))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ChaincodeSpec")))
                (HsProtobuf.Single "chaincode_spec")
                []
                "")]

instance HsJSONPB.ToJSONPB ChaincodeInvocationSpec where
        toJSONPB (ChaincodeInvocationSpec f1)
          = (HsJSONPB.object ["chaincode_spec" .= f1])
        toEncodingPB (ChaincodeInvocationSpec f1)
          = (HsJSONPB.pairs ["chaincode_spec" .= f1])

instance HsJSONPB.FromJSONPB ChaincodeInvocationSpec where
        parseJSONPB
          = (HsJSONPB.withObject "ChaincodeInvocationSpec"
               (\ obj ->
                  (Hs.pure ChaincodeInvocationSpec) <*> obj .: "chaincode_spec"))

instance HsJSONPB.ToJSON ChaincodeInvocationSpec where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ChaincodeInvocationSpec where
        parseJSON = HsJSONPB.parseJSONPB

-- instance HsJSONPB.ToSchema ChaincodeInvocationSpec where
--         declareNamedSchema _
--           = do let declare_chaincode_spec = HsJSONPB.declareSchemaRef
--                chaincodeInvocationSpecChaincodeSpec <- declare_chaincode_spec
--                                                          Proxy.Proxy
--                let _ = Hs.pure ChaincodeInvocationSpec <*>
--                          HsJSONPB.asProxy declare_chaincode_spec
--                Hs.return
--                  (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
--                                          Hs.Just "ChaincodeInvocationSpec",
--                                        HsJSONPB._namedSchemaSchema =
--                                          Hs.mempty{HsJSONPB._schemaParamSchema =
--                                                      Hs.mempty{HsJSONPB._paramSchemaType =
--                                                                  Hs.Just HsJSONPB.SwaggerObject},
--                                                    HsJSONPB._schemaProperties =
--                                                      HsJSONPB.insOrdFromList
--                                                        [("chaincode_spec",
--                                                          chaincodeInvocationSpecChaincodeSpec)]}})

data LifecycleEvent = LifecycleEvent{lifecycleEventChaincodeName ::
                                     Hs.Text}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named LifecycleEvent where
        nameOf _ = (Hs.fromString "LifecycleEvent")

instance HsProtobuf.HasDefault LifecycleEvent

instance HsProtobuf.Message LifecycleEvent where
        encodeMessage _
          LifecycleEvent{lifecycleEventChaincodeName =
                           lifecycleEventChaincodeName}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   lifecycleEventChaincodeName)])
        decodeMessage _
          = (Hs.pure LifecycleEvent) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "chaincode_name")
                []
                "")]

instance HsJSONPB.ToJSONPB LifecycleEvent where
        toJSONPB (LifecycleEvent f1)
          = (HsJSONPB.object ["chaincode_name" .= f1])
        toEncodingPB (LifecycleEvent f1)
          = (HsJSONPB.pairs ["chaincode_name" .= f1])

instance HsJSONPB.FromJSONPB LifecycleEvent where
        parseJSONPB
          = (HsJSONPB.withObject "LifecycleEvent"
               (\ obj -> (Hs.pure LifecycleEvent) <*> obj .: "chaincode_name"))

instance HsJSONPB.ToJSON LifecycleEvent where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON LifecycleEvent where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema LifecycleEvent where
        declareNamedSchema _
          = do let declare_chaincode_name = HsJSONPB.declareSchemaRef
               lifecycleEventChaincodeName <- declare_chaincode_name Proxy.Proxy
               let _ = Hs.pure LifecycleEvent <*>
                         HsJSONPB.asProxy declare_chaincode_name
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LifecycleEvent",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("chaincode_name",
                                                         lifecycleEventChaincodeName)]}})

data CDSData = CDSData{cdsdataHash :: Hs.ByteString,
                       cdsdataMetadatahash :: Hs.ByteString}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named CDSData where
        nameOf _ = (Hs.fromString "CDSData")

instance HsProtobuf.HasDefault CDSData

instance HsProtobuf.Message CDSData where
        encodeMessage _
          CDSData{cdsdataHash = cdsdataHash,
                  cdsdataMetadatahash = cdsdataMetadatahash}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   cdsdataHash),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   cdsdataMetadatahash)])
        decodeMessage _
          = (Hs.pure CDSData) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "hash")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "metadatahash")
                []
                "")]

instance HsJSONPB.ToJSONPB CDSData where
        toJSONPB (CDSData f1 f2)
          = (HsJSONPB.object ["hash" .= f1, "metadatahash" .= f2])
        toEncodingPB (CDSData f1 f2)
          = (HsJSONPB.pairs ["hash" .= f1, "metadatahash" .= f2])

instance HsJSONPB.FromJSONPB CDSData where
        parseJSONPB
          = (HsJSONPB.withObject "CDSData"
               (\ obj ->
                  (Hs.pure CDSData) <*> obj .: "hash" <*> obj .: "metadatahash"))

instance HsJSONPB.ToJSON CDSData where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON CDSData where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema CDSData where
        declareNamedSchema _
          = do let declare_hash = HsJSONPB.declareSchemaRef
               cdsdataHash <- declare_hash Proxy.Proxy
               let declare_metadatahash = HsJSONPB.declareSchemaRef
               cdsdataMetadatahash <- declare_metadatahash Proxy.Proxy
               let _ = Hs.pure CDSData <*> HsJSONPB.asProxy declare_hash <*>
                         HsJSONPB.asProxy declare_metadatahash
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "CDSData",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("hash", cdsdataHash),
                                                        ("metadatahash", cdsdataMetadatahash)]}})

data ChaincodeData = ChaincodeData{chaincodeDataName :: Hs.Text,
                                   chaincodeDataVersion :: Hs.Text, chaincodeDataEscc :: Hs.Text,
                                   chaincodeDataVscc :: Hs.Text,
                                   chaincodeDataPolicy ::
                                   Hs.Maybe Common.Policies.SignaturePolicyEnvelope,
                                   chaincodeDataData :: Hs.ByteString,
                                   chaincodeDataId :: Hs.ByteString,
                                   chaincodeDataInstantiationPolicy ::
                                   Hs.Maybe Common.Policies.SignaturePolicyEnvelope}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChaincodeData where
        nameOf _ = (Hs.fromString "ChaincodeData")

instance HsProtobuf.HasDefault ChaincodeData

instance HsProtobuf.Message ChaincodeData where
        encodeMessage _
          ChaincodeData{chaincodeDataName = chaincodeDataName,
                        chaincodeDataVersion = chaincodeDataVersion,
                        chaincodeDataEscc = chaincodeDataEscc,
                        chaincodeDataVscc = chaincodeDataVscc,
                        chaincodeDataPolicy = chaincodeDataPolicy,
                        chaincodeDataData = chaincodeDataData,
                        chaincodeDataId = chaincodeDataId,
                        chaincodeDataInstantiationPolicy =
                          chaincodeDataInstantiationPolicy}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   chaincodeDataName),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   chaincodeDataVersion),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   chaincodeDataEscc),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   chaincodeDataVscc),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   (Hs.coerce @(Hs.Maybe Common.Policies.SignaturePolicyEnvelope)
                      @(HsProtobuf.Nested Common.Policies.SignaturePolicyEnvelope)
                      chaincodeDataPolicy)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   chaincodeDataData),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                   chaincodeDataId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                   (Hs.coerce @(Hs.Maybe Common.Policies.SignaturePolicyEnvelope)
                      @(HsProtobuf.Nested Common.Policies.SignaturePolicyEnvelope)
                      chaincodeDataInstantiationPolicy))])
        decodeMessage _
          = (Hs.pure ChaincodeData) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Common.Policies.SignaturePolicyEnvelope))
                 @(_ (Hs.Maybe Common.Policies.SignaturePolicyEnvelope))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 5)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 6))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 7))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Common.Policies.SignaturePolicyEnvelope))
                 @(_ (Hs.Maybe Common.Policies.SignaturePolicyEnvelope))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 8)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "name")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "version")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "escc")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "vscc")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path ("common" Hs.:| ["SignaturePolicyEnvelope"])))))
                (HsProtobuf.Single "policy")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "data")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 7)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 8)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path ("common" Hs.:| ["SignaturePolicyEnvelope"])))))
                (HsProtobuf.Single "instantiation_policy")
                []
                "")]

instance HsJSONPB.ToJSONPB ChaincodeData where
        toJSONPB (ChaincodeData f1 f2 f3 f4 f5 f6 f7 f8)
          = (HsJSONPB.object
               ["name" .= f1, "version" .= f2, "escc" .= f3, "vscc" .= f4,
                "policy" .= f5, "data" .= f6, "id" .= f7,
                "instantiation_policy" .= f8])
        toEncodingPB (ChaincodeData f1 f2 f3 f4 f5 f6 f7 f8)
          = (HsJSONPB.pairs
               ["name" .= f1, "version" .= f2, "escc" .= f3, "vscc" .= f4,
                "policy" .= f5, "data" .= f6, "id" .= f7,
                "instantiation_policy" .= f8])

instance HsJSONPB.FromJSONPB ChaincodeData where
        parseJSONPB
          = (HsJSONPB.withObject "ChaincodeData"
               (\ obj ->
                  (Hs.pure ChaincodeData) <*> obj .: "name" <*> obj .: "version" <*>
                    obj .: "escc"
                    <*> obj .: "vscc"
                    <*> obj .: "policy"
                    <*> obj .: "data"
                    <*> obj .: "id"
                    <*> obj .: "instantiation_policy"))

instance HsJSONPB.ToJSON ChaincodeData where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ChaincodeData where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema ChaincodeData where
        declareNamedSchema _
          = do let declare_name = HsJSONPB.declareSchemaRef
               chaincodeDataName <- declare_name Proxy.Proxy
               let declare_version = HsJSONPB.declareSchemaRef
               chaincodeDataVersion <- declare_version Proxy.Proxy
               let declare_escc = HsJSONPB.declareSchemaRef
               chaincodeDataEscc <- declare_escc Proxy.Proxy
               let declare_vscc = HsJSONPB.declareSchemaRef
               chaincodeDataVscc <- declare_vscc Proxy.Proxy
               let declare_policy = HsJSONPB.declareSchemaRef
               chaincodeDataPolicy <- declare_policy Proxy.Proxy
               let declare_data = HsJSONPB.declareSchemaRef
               chaincodeDataData <- declare_data Proxy.Proxy
               let declare_id = HsJSONPB.declareSchemaRef
               chaincodeDataId <- declare_id Proxy.Proxy
               let declare_instantiation_policy = HsJSONPB.declareSchemaRef
               chaincodeDataInstantiationPolicy <- declare_instantiation_policy
                                                     Proxy.Proxy
               let _ = Hs.pure ChaincodeData <*> HsJSONPB.asProxy declare_name <*>
                         HsJSONPB.asProxy declare_version
                         <*> HsJSONPB.asProxy declare_escc
                         <*> HsJSONPB.asProxy declare_vscc
                         <*> HsJSONPB.asProxy declare_policy
                         <*> HsJSONPB.asProxy declare_data
                         <*> HsJSONPB.asProxy declare_id
                         <*> HsJSONPB.asProxy declare_instantiation_policy
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ChaincodeData",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("name", chaincodeDataName),
                                                        ("version", chaincodeDataVersion),
                                                        ("escc", chaincodeDataEscc),
                                                        ("vscc", chaincodeDataVscc),
                                                        ("policy", chaincodeDataPolicy),
                                                        ("data", chaincodeDataData),
                                                        ("id", chaincodeDataId),
                                                        ("instantiation_policy",
                                                         chaincodeDataInstantiationPolicy)]}})
