{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Peer.ChaincodeShim where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import Network.GRPC.HighLevel.Generated as HsGRPC
import Network.GRPC.HighLevel.Client as HsGRPC
import Network.GRPC.HighLevel.Server as HsGRPC hiding (serverLoop)
import Network.GRPC.HighLevel.Server.Unregistered as HsGRPC
       (serverLoop)
import qualified Peer.Proposal
import qualified Peer.ChaincodeEvent
import qualified Google.Protobuf.Timestamp

data ChaincodeMessage = ChaincodeMessage{chaincodeMessageType ::
                                         HsProtobuf.Enumerated
                                           Peer.ChaincodeShim.ChaincodeMessage_Type,
                                         chaincodeMessageTimestamp ::
                                         Hs.Maybe Google.Protobuf.Timestamp.Timestamp,
                                         chaincodeMessagePayload :: Hs.ByteString,
                                         chaincodeMessageTxid :: Hs.Text,
                                         chaincodeMessageProposal ::
                                         Hs.Maybe Peer.Proposal.SignedProposal,
                                         chaincodeMessageChaincodeEvent ::
                                         Hs.Maybe Peer.ChaincodeEvent.ChaincodeEvent,
                                         chaincodeMessageChannelId :: Hs.Text}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChaincodeMessage where
        nameOf _ = (Hs.fromString "ChaincodeMessage")

instance HsProtobuf.HasDefault ChaincodeMessage

instance HsProtobuf.Message ChaincodeMessage where
        encodeMessage _
          ChaincodeMessage{chaincodeMessageType = chaincodeMessageType,
                           chaincodeMessageTimestamp = chaincodeMessageTimestamp,
                           chaincodeMessagePayload = chaincodeMessagePayload,
                           chaincodeMessageTxid = chaincodeMessageTxid,
                           chaincodeMessageProposal = chaincodeMessageProposal,
                           chaincodeMessageChaincodeEvent = chaincodeMessageChaincodeEvent,
                           chaincodeMessageChannelId = chaincodeMessageChannelId}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   chaincodeMessageType),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                      @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                      chaincodeMessageTimestamp)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   chaincodeMessagePayload),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   chaincodeMessageTxid),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   (Hs.coerce @(Hs.Maybe Peer.Proposal.SignedProposal)
                      @(HsProtobuf.Nested Peer.Proposal.SignedProposal)
                      chaincodeMessageProposal)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   (Hs.coerce @(Hs.Maybe Peer.ChaincodeEvent.ChaincodeEvent)
                      @(HsProtobuf.Nested Peer.ChaincodeEvent.ChaincodeEvent)
                      chaincodeMessageChaincodeEvent)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                   chaincodeMessageChannelId)])
        decodeMessage _
          = (Hs.pure ChaincodeMessage) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp))
                 @(_ (Hs.Maybe Google.Protobuf.Timestamp.Timestamp))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Peer.Proposal.SignedProposal))
                 @(_ (Hs.Maybe Peer.Proposal.SignedProposal))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 5)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Peer.ChaincodeEvent.ChaincodeEvent))
                 @(_ (Hs.Maybe Peer.ChaincodeEvent.ChaincodeEvent))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 6)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 7))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
                (HsProtobuf.Single "type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path ("google" Hs.:| ["protobuf", "Timestamp"])))))
                (HsProtobuf.Single "timestamp")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "payload")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "txid")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "SignedProposal")))
                (HsProtobuf.Single "proposal")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "ChaincodeEvent")))
                (HsProtobuf.Single "chaincode_event")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 7)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "channel_id")
                []
                "")]

instance HsJSONPB.ToJSONPB ChaincodeMessage where
        toJSONPB (ChaincodeMessage f1 f2 f3 f4 f5 f6 f7)
          = (HsJSONPB.object
               ["type" .= f1, "timestamp" .= f2, "payload" .= f3, "txid" .= f4,
                "proposal" .= f5, "chaincode_event" .= f6, "channel_id" .= f7])
        toEncodingPB (ChaincodeMessage f1 f2 f3 f4 f5 f6 f7)
          = (HsJSONPB.pairs
               ["type" .= f1, "timestamp" .= f2, "payload" .= f3, "txid" .= f4,
                "proposal" .= f5, "chaincode_event" .= f6, "channel_id" .= f7])

instance HsJSONPB.FromJSONPB ChaincodeMessage where
        parseJSONPB
          = (HsJSONPB.withObject "ChaincodeMessage"
               (\ obj ->
                  (Hs.pure ChaincodeMessage) <*> obj .: "type" <*> obj .: "timestamp"
                    <*> obj .: "payload"
                    <*> obj .: "txid"
                    <*> obj .: "proposal"
                    <*> obj .: "chaincode_event"
                    <*> obj .: "channel_id"))

instance HsJSONPB.ToJSON ChaincodeMessage where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ChaincodeMessage where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema ChaincodeMessage where
        declareNamedSchema _
          = do let declare_type = HsJSONPB.declareSchemaRef
               chaincodeMessageType <- declare_type Proxy.Proxy
               let declare_timestamp = HsJSONPB.declareSchemaRef
               chaincodeMessageTimestamp <- declare_timestamp Proxy.Proxy
               let declare_payload = HsJSONPB.declareSchemaRef
               chaincodeMessagePayload <- declare_payload Proxy.Proxy
               let declare_txid = HsJSONPB.declareSchemaRef
               chaincodeMessageTxid <- declare_txid Proxy.Proxy
               let declare_proposal = HsJSONPB.declareSchemaRef
               chaincodeMessageProposal <- declare_proposal Proxy.Proxy
               let declare_chaincode_event = HsJSONPB.declareSchemaRef
               chaincodeMessageChaincodeEvent <- declare_chaincode_event
                                                   Proxy.Proxy
               let declare_channel_id = HsJSONPB.declareSchemaRef
               chaincodeMessageChannelId <- declare_channel_id Proxy.Proxy
               let _ = Hs.pure ChaincodeMessage <*> HsJSONPB.asProxy declare_type
                         <*> HsJSONPB.asProxy declare_timestamp
                         <*> HsJSONPB.asProxy declare_payload
                         <*> HsJSONPB.asProxy declare_txid
                         <*> HsJSONPB.asProxy declare_proposal
                         <*> HsJSONPB.asProxy declare_chaincode_event
                         <*> HsJSONPB.asProxy declare_channel_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ChaincodeMessage",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("type", chaincodeMessageType),
                                                        ("timestamp", chaincodeMessageTimestamp),
                                                        ("payload", chaincodeMessagePayload),
                                                        ("txid", chaincodeMessageTxid),
                                                        ("proposal", chaincodeMessageProposal),
                                                        ("chaincode_event",
                                                         chaincodeMessageChaincodeEvent),
                                                        ("channel_id",
                                                         chaincodeMessageChannelId)]}})

data ChaincodeMessage_Type = ChaincodeMessage_TypeUNDEFINED
                           | ChaincodeMessage_TypeREGISTER
                           | ChaincodeMessage_TypeREGISTERED
                           | ChaincodeMessage_TypeINIT
                           | ChaincodeMessage_TypeREADY
                           | ChaincodeMessage_TypeTRANSACTION
                           | ChaincodeMessage_TypeCOMPLETED
                           | ChaincodeMessage_TypeERROR
                           | ChaincodeMessage_TypeGET_STATE
                           | ChaincodeMessage_TypePUT_STATE
                           | ChaincodeMessage_TypeDEL_STATE
                           | ChaincodeMessage_TypeINVOKE_CHAINCODE
                           | ChaincodeMessage_TypeRESPONSE
                           | ChaincodeMessage_TypeGET_STATE_BY_RANGE
                           | ChaincodeMessage_TypeGET_QUERY_RESULT
                           | ChaincodeMessage_TypeQUERY_STATE_NEXT
                           | ChaincodeMessage_TypeQUERY_STATE_CLOSE
                           | ChaincodeMessage_TypeKEEPALIVE
                           | ChaincodeMessage_TypeGET_HISTORY_FOR_KEY
                           | ChaincodeMessage_TypeGET_STATE_METADATA
                           | ChaincodeMessage_TypePUT_STATE_METADATA
                           | ChaincodeMessage_TypeGET_PRIVATE_DATA_HASH
                           deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChaincodeMessage_Type where
        nameOf _ = (Hs.fromString "ChaincodeMessage_Type")

instance HsProtobuf.HasDefault ChaincodeMessage_Type

instance Hs.Bounded ChaincodeMessage_Type where
        minBound = ChaincodeMessage_TypeUNDEFINED
        maxBound = ChaincodeMessage_TypeGET_PRIVATE_DATA_HASH

instance Hs.Ord ChaincodeMessage_Type where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)

instance HsProtobuf.ProtoEnum ChaincodeMessage_Type where
        toProtoEnumMay 0 = Hs.Just ChaincodeMessage_TypeUNDEFINED
        toProtoEnumMay 1 = Hs.Just ChaincodeMessage_TypeREGISTER
        toProtoEnumMay 2 = Hs.Just ChaincodeMessage_TypeREGISTERED
        toProtoEnumMay 3 = Hs.Just ChaincodeMessage_TypeINIT
        toProtoEnumMay 4 = Hs.Just ChaincodeMessage_TypeREADY
        toProtoEnumMay 5 = Hs.Just ChaincodeMessage_TypeTRANSACTION
        toProtoEnumMay 6 = Hs.Just ChaincodeMessage_TypeCOMPLETED
        toProtoEnumMay 7 = Hs.Just ChaincodeMessage_TypeERROR
        toProtoEnumMay 8 = Hs.Just ChaincodeMessage_TypeGET_STATE
        toProtoEnumMay 9 = Hs.Just ChaincodeMessage_TypePUT_STATE
        toProtoEnumMay 10 = Hs.Just ChaincodeMessage_TypeDEL_STATE
        toProtoEnumMay 11 = Hs.Just ChaincodeMessage_TypeINVOKE_CHAINCODE
        toProtoEnumMay 13 = Hs.Just ChaincodeMessage_TypeRESPONSE
        toProtoEnumMay 14 = Hs.Just ChaincodeMessage_TypeGET_STATE_BY_RANGE
        toProtoEnumMay 15 = Hs.Just ChaincodeMessage_TypeGET_QUERY_RESULT
        toProtoEnumMay 16 = Hs.Just ChaincodeMessage_TypeQUERY_STATE_NEXT
        toProtoEnumMay 17 = Hs.Just ChaincodeMessage_TypeQUERY_STATE_CLOSE
        toProtoEnumMay 18 = Hs.Just ChaincodeMessage_TypeKEEPALIVE
        toProtoEnumMay 19
          = Hs.Just ChaincodeMessage_TypeGET_HISTORY_FOR_KEY
        toProtoEnumMay 20 = Hs.Just ChaincodeMessage_TypeGET_STATE_METADATA
        toProtoEnumMay 21 = Hs.Just ChaincodeMessage_TypePUT_STATE_METADATA
        toProtoEnumMay 22
          = Hs.Just ChaincodeMessage_TypeGET_PRIVATE_DATA_HASH
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (ChaincodeMessage_TypeUNDEFINED) = 0
        fromProtoEnum (ChaincodeMessage_TypeREGISTER) = 1
        fromProtoEnum (ChaincodeMessage_TypeREGISTERED) = 2
        fromProtoEnum (ChaincodeMessage_TypeINIT) = 3
        fromProtoEnum (ChaincodeMessage_TypeREADY) = 4
        fromProtoEnum (ChaincodeMessage_TypeTRANSACTION) = 5
        fromProtoEnum (ChaincodeMessage_TypeCOMPLETED) = 6
        fromProtoEnum (ChaincodeMessage_TypeERROR) = 7
        fromProtoEnum (ChaincodeMessage_TypeGET_STATE) = 8
        fromProtoEnum (ChaincodeMessage_TypePUT_STATE) = 9
        fromProtoEnum (ChaincodeMessage_TypeDEL_STATE) = 10
        fromProtoEnum (ChaincodeMessage_TypeINVOKE_CHAINCODE) = 11
        fromProtoEnum (ChaincodeMessage_TypeRESPONSE) = 13
        fromProtoEnum (ChaincodeMessage_TypeGET_STATE_BY_RANGE) = 14
        fromProtoEnum (ChaincodeMessage_TypeGET_QUERY_RESULT) = 15
        fromProtoEnum (ChaincodeMessage_TypeQUERY_STATE_NEXT) = 16
        fromProtoEnum (ChaincodeMessage_TypeQUERY_STATE_CLOSE) = 17
        fromProtoEnum (ChaincodeMessage_TypeKEEPALIVE) = 18
        fromProtoEnum (ChaincodeMessage_TypeGET_HISTORY_FOR_KEY) = 19
        fromProtoEnum (ChaincodeMessage_TypeGET_STATE_METADATA) = 20
        fromProtoEnum (ChaincodeMessage_TypePUT_STATE_METADATA) = 21
        fromProtoEnum (ChaincodeMessage_TypeGET_PRIVATE_DATA_HASH) = 22

instance HsJSONPB.ToJSONPB ChaincodeMessage_Type where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x

instance HsJSONPB.FromJSONPB ChaincodeMessage_Type where
        parseJSONPB (HsJSONPB.String "UNDEFINED")
          = Hs.pure ChaincodeMessage_TypeUNDEFINED
        parseJSONPB (HsJSONPB.String "REGISTER")
          = Hs.pure ChaincodeMessage_TypeREGISTER
        parseJSONPB (HsJSONPB.String "REGISTERED")
          = Hs.pure ChaincodeMessage_TypeREGISTERED
        parseJSONPB (HsJSONPB.String "INIT")
          = Hs.pure ChaincodeMessage_TypeINIT
        parseJSONPB (HsJSONPB.String "READY")
          = Hs.pure ChaincodeMessage_TypeREADY
        parseJSONPB (HsJSONPB.String "TRANSACTION")
          = Hs.pure ChaincodeMessage_TypeTRANSACTION
        parseJSONPB (HsJSONPB.String "COMPLETED")
          = Hs.pure ChaincodeMessage_TypeCOMPLETED
        parseJSONPB (HsJSONPB.String "ERROR")
          = Hs.pure ChaincodeMessage_TypeERROR
        parseJSONPB (HsJSONPB.String "GET_STATE")
          = Hs.pure ChaincodeMessage_TypeGET_STATE
        parseJSONPB (HsJSONPB.String "PUT_STATE")
          = Hs.pure ChaincodeMessage_TypePUT_STATE
        parseJSONPB (HsJSONPB.String "DEL_STATE")
          = Hs.pure ChaincodeMessage_TypeDEL_STATE
        parseJSONPB (HsJSONPB.String "INVOKE_CHAINCODE")
          = Hs.pure ChaincodeMessage_TypeINVOKE_CHAINCODE
        parseJSONPB (HsJSONPB.String "RESPONSE")
          = Hs.pure ChaincodeMessage_TypeRESPONSE
        parseJSONPB (HsJSONPB.String "GET_STATE_BY_RANGE")
          = Hs.pure ChaincodeMessage_TypeGET_STATE_BY_RANGE
        parseJSONPB (HsJSONPB.String "GET_QUERY_RESULT")
          = Hs.pure ChaincodeMessage_TypeGET_QUERY_RESULT
        parseJSONPB (HsJSONPB.String "QUERY_STATE_NEXT")
          = Hs.pure ChaincodeMessage_TypeQUERY_STATE_NEXT
        parseJSONPB (HsJSONPB.String "QUERY_STATE_CLOSE")
          = Hs.pure ChaincodeMessage_TypeQUERY_STATE_CLOSE
        parseJSONPB (HsJSONPB.String "KEEPALIVE")
          = Hs.pure ChaincodeMessage_TypeKEEPALIVE
        parseJSONPB (HsJSONPB.String "GET_HISTORY_FOR_KEY")
          = Hs.pure ChaincodeMessage_TypeGET_HISTORY_FOR_KEY
        parseJSONPB (HsJSONPB.String "GET_STATE_METADATA")
          = Hs.pure ChaincodeMessage_TypeGET_STATE_METADATA
        parseJSONPB (HsJSONPB.String "PUT_STATE_METADATA")
          = Hs.pure ChaincodeMessage_TypePUT_STATE_METADATA
        parseJSONPB (HsJSONPB.String "GET_PRIVATE_DATA_HASH")
          = Hs.pure ChaincodeMessage_TypeGET_PRIVATE_DATA_HASH
        parseJSONPB v = (HsJSONPB.typeMismatch "ChaincodeMessage_Type" v)

instance HsJSONPB.ToJSON ChaincodeMessage_Type where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ChaincodeMessage_Type where
        parseJSON = HsJSONPB.parseJSONPB

instance HsProtobuf.Finite ChaincodeMessage_Type

data GetState = GetState{getStateKey :: Hs.Text,
                         getStateCollection :: Hs.Text}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetState where
        nameOf _ = (Hs.fromString "GetState")

instance HsProtobuf.HasDefault GetState

instance HsProtobuf.Message GetState where
        encodeMessage _
          GetState{getStateKey = getStateKey,
                   getStateCollection = getStateCollection}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getStateKey),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   getStateCollection)])
        decodeMessage _
          = (Hs.pure GetState) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "key")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "collection")
                []
                "")]

instance HsJSONPB.ToJSONPB GetState where
        toJSONPB (GetState f1 f2)
          = (HsJSONPB.object ["key" .= f1, "collection" .= f2])
        toEncodingPB (GetState f1 f2)
          = (HsJSONPB.pairs ["key" .= f1, "collection" .= f2])

instance HsJSONPB.FromJSONPB GetState where
        parseJSONPB
          = (HsJSONPB.withObject "GetState"
               (\ obj ->
                  (Hs.pure GetState) <*> obj .: "key" <*> obj .: "collection"))

instance HsJSONPB.ToJSON GetState where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetState where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetState where
        declareNamedSchema _
          = do let declare_key = HsJSONPB.declareSchemaRef
               getStateKey <- declare_key Proxy.Proxy
               let declare_collection = HsJSONPB.declareSchemaRef
               getStateCollection <- declare_collection Proxy.Proxy
               let _ = Hs.pure GetState <*> HsJSONPB.asProxy declare_key <*>
                         HsJSONPB.asProxy declare_collection
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetState",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("key", getStateKey),
                                                        ("collection", getStateCollection)]}})

data GetStateMetadata = GetStateMetadata{getStateMetadataKey ::
                                         Hs.Text,
                                         getStateMetadataCollection :: Hs.Text}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetStateMetadata where
        nameOf _ = (Hs.fromString "GetStateMetadata")

instance HsProtobuf.HasDefault GetStateMetadata

instance HsProtobuf.Message GetStateMetadata where
        encodeMessage _
          GetStateMetadata{getStateMetadataKey = getStateMetadataKey,
                           getStateMetadataCollection = getStateMetadataCollection}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getStateMetadataKey),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   getStateMetadataCollection)])
        decodeMessage _
          = (Hs.pure GetStateMetadata) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "key")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "collection")
                []
                "")]

instance HsJSONPB.ToJSONPB GetStateMetadata where
        toJSONPB (GetStateMetadata f1 f2)
          = (HsJSONPB.object ["key" .= f1, "collection" .= f2])
        toEncodingPB (GetStateMetadata f1 f2)
          = (HsJSONPB.pairs ["key" .= f1, "collection" .= f2])

instance HsJSONPB.FromJSONPB GetStateMetadata where
        parseJSONPB
          = (HsJSONPB.withObject "GetStateMetadata"
               (\ obj ->
                  (Hs.pure GetStateMetadata) <*> obj .: "key" <*>
                    obj .: "collection"))

instance HsJSONPB.ToJSON GetStateMetadata where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetStateMetadata where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetStateMetadata where
        declareNamedSchema _
          = do let declare_key = HsJSONPB.declareSchemaRef
               getStateMetadataKey <- declare_key Proxy.Proxy
               let declare_collection = HsJSONPB.declareSchemaRef
               getStateMetadataCollection <- declare_collection Proxy.Proxy
               let _ = Hs.pure GetStateMetadata <*> HsJSONPB.asProxy declare_key
                         <*> HsJSONPB.asProxy declare_collection
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetStateMetadata",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("key", getStateMetadataKey),
                                                        ("collection",
                                                         getStateMetadataCollection)]}})

data PutState = PutState{putStateKey :: Hs.Text,
                         putStateValue :: Hs.ByteString, putStateCollection :: Hs.Text}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named PutState where
        nameOf _ = (Hs.fromString "PutState")

instance HsProtobuf.HasDefault PutState

instance HsProtobuf.Message PutState where
        encodeMessage _
          PutState{putStateKey = putStateKey, putStateValue = putStateValue,
                   putStateCollection = putStateCollection}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   putStateKey),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   putStateValue),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   putStateCollection)])
        decodeMessage _
          = (Hs.pure PutState) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "key")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "value")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "collection")
                []
                "")]

instance HsJSONPB.ToJSONPB PutState where
        toJSONPB (PutState f1 f2 f3)
          = (HsJSONPB.object
               ["key" .= f1, "value" .= f2, "collection" .= f3])
        toEncodingPB (PutState f1 f2 f3)
          = (HsJSONPB.pairs ["key" .= f1, "value" .= f2, "collection" .= f3])

instance HsJSONPB.FromJSONPB PutState where
        parseJSONPB
          = (HsJSONPB.withObject "PutState"
               (\ obj ->
                  (Hs.pure PutState) <*> obj .: "key" <*> obj .: "value" <*>
                    obj .: "collection"))

instance HsJSONPB.ToJSON PutState where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON PutState where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema PutState where
        declareNamedSchema _
          = do let declare_key = HsJSONPB.declareSchemaRef
               putStateKey <- declare_key Proxy.Proxy
               let declare_value = HsJSONPB.declareSchemaRef
               putStateValue <- declare_value Proxy.Proxy
               let declare_collection = HsJSONPB.declareSchemaRef
               putStateCollection <- declare_collection Proxy.Proxy
               let _ = Hs.pure PutState <*> HsJSONPB.asProxy declare_key <*>
                         HsJSONPB.asProxy declare_value
                         <*> HsJSONPB.asProxy declare_collection
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "PutState",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("key", putStateKey),
                                                        ("value", putStateValue),
                                                        ("collection", putStateCollection)]}})

data PutStateMetadata = PutStateMetadata{putStateMetadataKey ::
                                         Hs.Text,
                                         putStateMetadataCollection :: Hs.Text,
                                         putStateMetadataMetadata ::
                                         Hs.Maybe Peer.ChaincodeShim.StateMetadata}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named PutStateMetadata where
        nameOf _ = (Hs.fromString "PutStateMetadata")

instance HsProtobuf.HasDefault PutStateMetadata

instance HsProtobuf.Message PutStateMetadata where
        encodeMessage _
          PutStateMetadata{putStateMetadataKey = putStateMetadataKey,
                           putStateMetadataCollection = putStateMetadataCollection,
                           putStateMetadataMetadata = putStateMetadataMetadata}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   putStateMetadataKey),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   putStateMetadataCollection),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   (Hs.coerce @(Hs.Maybe Peer.ChaincodeShim.StateMetadata)
                      @(HsProtobuf.Nested Peer.ChaincodeShim.StateMetadata)
                      putStateMetadataMetadata))])
        decodeMessage _
          = (Hs.pure PutStateMetadata) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Peer.ChaincodeShim.StateMetadata))
                 @(_ (Hs.Maybe Peer.ChaincodeShim.StateMetadata))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 4)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "key")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "collection")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "StateMetadata")))
                (HsProtobuf.Single "metadata")
                []
                "")]

instance HsJSONPB.ToJSONPB PutStateMetadata where
        toJSONPB (PutStateMetadata f1 f3 f4)
          = (HsJSONPB.object
               ["key" .= f1, "collection" .= f3, "metadata" .= f4])
        toEncodingPB (PutStateMetadata f1 f3 f4)
          = (HsJSONPB.pairs
               ["key" .= f1, "collection" .= f3, "metadata" .= f4])

instance HsJSONPB.FromJSONPB PutStateMetadata where
        parseJSONPB
          = (HsJSONPB.withObject "PutStateMetadata"
               (\ obj ->
                  (Hs.pure PutStateMetadata) <*> obj .: "key" <*> obj .: "collection"
                    <*> obj .: "metadata"))

instance HsJSONPB.ToJSON PutStateMetadata where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON PutStateMetadata where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema PutStateMetadata where
        declareNamedSchema _
          = do let declare_key = HsJSONPB.declareSchemaRef
               putStateMetadataKey <- declare_key Proxy.Proxy
               let declare_collection = HsJSONPB.declareSchemaRef
               putStateMetadataCollection <- declare_collection Proxy.Proxy
               let declare_metadata = HsJSONPB.declareSchemaRef
               putStateMetadataMetadata <- declare_metadata Proxy.Proxy
               let _ = Hs.pure PutStateMetadata <*> HsJSONPB.asProxy declare_key
                         <*> HsJSONPB.asProxy declare_collection
                         <*> HsJSONPB.asProxy declare_metadata
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "PutStateMetadata",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("key", putStateMetadataKey),
                                                        ("collection", putStateMetadataCollection),
                                                        ("metadata", putStateMetadataMetadata)]}})

data DelState = DelState{delStateKey :: Hs.Text,
                         delStateCollection :: Hs.Text}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named DelState where
        nameOf _ = (Hs.fromString "DelState")

instance HsProtobuf.HasDefault DelState

instance HsProtobuf.Message DelState where
        encodeMessage _
          DelState{delStateKey = delStateKey,
                   delStateCollection = delStateCollection}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   delStateKey),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   delStateCollection)])
        decodeMessage _
          = (Hs.pure DelState) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "key")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "collection")
                []
                "")]

instance HsJSONPB.ToJSONPB DelState where
        toJSONPB (DelState f1 f2)
          = (HsJSONPB.object ["key" .= f1, "collection" .= f2])
        toEncodingPB (DelState f1 f2)
          = (HsJSONPB.pairs ["key" .= f1, "collection" .= f2])

instance HsJSONPB.FromJSONPB DelState where
        parseJSONPB
          = (HsJSONPB.withObject "DelState"
               (\ obj ->
                  (Hs.pure DelState) <*> obj .: "key" <*> obj .: "collection"))

instance HsJSONPB.ToJSON DelState where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON DelState where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema DelState where
        declareNamedSchema _
          = do let declare_key = HsJSONPB.declareSchemaRef
               delStateKey <- declare_key Proxy.Proxy
               let declare_collection = HsJSONPB.declareSchemaRef
               delStateCollection <- declare_collection Proxy.Proxy
               let _ = Hs.pure DelState <*> HsJSONPB.asProxy declare_key <*>
                         HsJSONPB.asProxy declare_collection
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "DelState",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("key", delStateKey),
                                                        ("collection", delStateCollection)]}})

data GetStateByRange = GetStateByRange{getStateByRangeStartKey ::
                                       Hs.Text,
                                       getStateByRangeEndKey :: Hs.Text,
                                       getStateByRangeCollection :: Hs.Text,
                                       getStateByRangeMetadata :: Hs.ByteString}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetStateByRange where
        nameOf _ = (Hs.fromString "GetStateByRange")

instance HsProtobuf.HasDefault GetStateByRange

instance HsProtobuf.Message GetStateByRange where
        encodeMessage _
          GetStateByRange{getStateByRangeStartKey = getStateByRangeStartKey,
                          getStateByRangeEndKey = getStateByRangeEndKey,
                          getStateByRangeCollection = getStateByRangeCollection,
                          getStateByRangeMetadata = getStateByRangeMetadata}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getStateByRangeStartKey),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   getStateByRangeEndKey),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   getStateByRangeCollection),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   getStateByRangeMetadata)])
        decodeMessage _
          = (Hs.pure GetStateByRange) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "startKey")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "endKey")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "collection")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "metadata")
                []
                "")]

instance HsJSONPB.ToJSONPB GetStateByRange where
        toJSONPB (GetStateByRange f1 f2 f3 f4)
          = (HsJSONPB.object
               ["startKey" .= f1, "endKey" .= f2, "collection" .= f3,
                "metadata" .= f4])
        toEncodingPB (GetStateByRange f1 f2 f3 f4)
          = (HsJSONPB.pairs
               ["startKey" .= f1, "endKey" .= f2, "collection" .= f3,
                "metadata" .= f4])

instance HsJSONPB.FromJSONPB GetStateByRange where
        parseJSONPB
          = (HsJSONPB.withObject "GetStateByRange"
               (\ obj ->
                  (Hs.pure GetStateByRange) <*> obj .: "startKey" <*> obj .: "endKey"
                    <*> obj .: "collection"
                    <*> obj .: "metadata"))

instance HsJSONPB.ToJSON GetStateByRange where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetStateByRange where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetStateByRange where
        declareNamedSchema _
          = do let declare_startKey = HsJSONPB.declareSchemaRef
               getStateByRangeStartKey <- declare_startKey Proxy.Proxy
               let declare_endKey = HsJSONPB.declareSchemaRef
               getStateByRangeEndKey <- declare_endKey Proxy.Proxy
               let declare_collection = HsJSONPB.declareSchemaRef
               getStateByRangeCollection <- declare_collection Proxy.Proxy
               let declare_metadata = HsJSONPB.declareSchemaRef
               getStateByRangeMetadata <- declare_metadata Proxy.Proxy
               let _ = Hs.pure GetStateByRange <*>
                         HsJSONPB.asProxy declare_startKey
                         <*> HsJSONPB.asProxy declare_endKey
                         <*> HsJSONPB.asProxy declare_collection
                         <*> HsJSONPB.asProxy declare_metadata
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetStateByRange",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("startKey", getStateByRangeStartKey),
                                                        ("endKey", getStateByRangeEndKey),
                                                        ("collection", getStateByRangeCollection),
                                                        ("metadata", getStateByRangeMetadata)]}})

data GetQueryResult = GetQueryResult{getQueryResultQuery ::
                                     Hs.Text,
                                     getQueryResultCollection :: Hs.Text,
                                     getQueryResultMetadata :: Hs.ByteString}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetQueryResult where
        nameOf _ = (Hs.fromString "GetQueryResult")

instance HsProtobuf.HasDefault GetQueryResult

instance HsProtobuf.Message GetQueryResult where
        encodeMessage _
          GetQueryResult{getQueryResultQuery = getQueryResultQuery,
                         getQueryResultCollection = getQueryResultCollection,
                         getQueryResultMetadata = getQueryResultMetadata}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getQueryResultQuery),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   getQueryResultCollection),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   getQueryResultMetadata)])
        decodeMessage _
          = (Hs.pure GetQueryResult) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "query")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "collection")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "metadata")
                []
                "")]

instance HsJSONPB.ToJSONPB GetQueryResult where
        toJSONPB (GetQueryResult f1 f2 f3)
          = (HsJSONPB.object
               ["query" .= f1, "collection" .= f2, "metadata" .= f3])
        toEncodingPB (GetQueryResult f1 f2 f3)
          = (HsJSONPB.pairs
               ["query" .= f1, "collection" .= f2, "metadata" .= f3])

instance HsJSONPB.FromJSONPB GetQueryResult where
        parseJSONPB
          = (HsJSONPB.withObject "GetQueryResult"
               (\ obj ->
                  (Hs.pure GetQueryResult) <*> obj .: "query" <*> obj .: "collection"
                    <*> obj .: "metadata"))

instance HsJSONPB.ToJSON GetQueryResult where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetQueryResult where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetQueryResult where
        declareNamedSchema _
          = do let declare_query = HsJSONPB.declareSchemaRef
               getQueryResultQuery <- declare_query Proxy.Proxy
               let declare_collection = HsJSONPB.declareSchemaRef
               getQueryResultCollection <- declare_collection Proxy.Proxy
               let declare_metadata = HsJSONPB.declareSchemaRef
               getQueryResultMetadata <- declare_metadata Proxy.Proxy
               let _ = Hs.pure GetQueryResult <*> HsJSONPB.asProxy declare_query
                         <*> HsJSONPB.asProxy declare_collection
                         <*> HsJSONPB.asProxy declare_metadata
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetQueryResult",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("query", getQueryResultQuery),
                                                        ("collection", getQueryResultCollection),
                                                        ("metadata", getQueryResultMetadata)]}})

data QueryMetadata = QueryMetadata{queryMetadataPageSize ::
                                   Hs.Int32,
                                   queryMetadataBookmark :: Hs.Text}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named QueryMetadata where
        nameOf _ = (Hs.fromString "QueryMetadata")

instance HsProtobuf.HasDefault QueryMetadata

instance HsProtobuf.Message QueryMetadata where
        encodeMessage _
          QueryMetadata{queryMetadataPageSize = queryMetadataPageSize,
                        queryMetadataBookmark = queryMetadataBookmark}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryMetadataPageSize),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   queryMetadataBookmark)])
        decodeMessage _
          = (Hs.pure QueryMetadata) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "pageSize")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "bookmark")
                []
                "")]

instance HsJSONPB.ToJSONPB QueryMetadata where
        toJSONPB (QueryMetadata f1 f2)
          = (HsJSONPB.object ["pageSize" .= f1, "bookmark" .= f2])
        toEncodingPB (QueryMetadata f1 f2)
          = (HsJSONPB.pairs ["pageSize" .= f1, "bookmark" .= f2])

instance HsJSONPB.FromJSONPB QueryMetadata where
        parseJSONPB
          = (HsJSONPB.withObject "QueryMetadata"
               (\ obj ->
                  (Hs.pure QueryMetadata) <*> obj .: "pageSize" <*>
                    obj .: "bookmark"))

instance HsJSONPB.ToJSON QueryMetadata where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON QueryMetadata where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema QueryMetadata where
        declareNamedSchema _
          = do let declare_pageSize = HsJSONPB.declareSchemaRef
               queryMetadataPageSize <- declare_pageSize Proxy.Proxy
               let declare_bookmark = HsJSONPB.declareSchemaRef
               queryMetadataBookmark <- declare_bookmark Proxy.Proxy
               let _ = Hs.pure QueryMetadata <*> HsJSONPB.asProxy declare_pageSize
                         <*> HsJSONPB.asProxy declare_bookmark
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryMetadata",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("pageSize", queryMetadataPageSize),
                                                        ("bookmark", queryMetadataBookmark)]}})

data GetHistoryForKey = GetHistoryForKey{getHistoryForKeyKey ::
                                         Hs.Text}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetHistoryForKey where
        nameOf _ = (Hs.fromString "GetHistoryForKey")

instance HsProtobuf.HasDefault GetHistoryForKey

instance HsProtobuf.Message GetHistoryForKey where
        encodeMessage _
          GetHistoryForKey{getHistoryForKeyKey = getHistoryForKeyKey}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   getHistoryForKeyKey)])
        decodeMessage _
          = (Hs.pure GetHistoryForKey) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "key")
                []
                "")]

instance HsJSONPB.ToJSONPB GetHistoryForKey where
        toJSONPB (GetHistoryForKey f1) = (HsJSONPB.object ["key" .= f1])
        toEncodingPB (GetHistoryForKey f1) = (HsJSONPB.pairs ["key" .= f1])

instance HsJSONPB.FromJSONPB GetHistoryForKey where
        parseJSONPB
          = (HsJSONPB.withObject "GetHistoryForKey"
               (\ obj -> (Hs.pure GetHistoryForKey) <*> obj .: "key"))

instance HsJSONPB.ToJSON GetHistoryForKey where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetHistoryForKey where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetHistoryForKey where
        declareNamedSchema _
          = do let declare_key = HsJSONPB.declareSchemaRef
               getHistoryForKeyKey <- declare_key Proxy.Proxy
               let _ = Hs.pure GetHistoryForKey <*> HsJSONPB.asProxy declare_key
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "GetHistoryForKey",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("key", getHistoryForKeyKey)]}})

data QueryStateNext = QueryStateNext{queryStateNextId :: Hs.Text}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named QueryStateNext where
        nameOf _ = (Hs.fromString "QueryStateNext")

instance HsProtobuf.HasDefault QueryStateNext

instance HsProtobuf.Message QueryStateNext where
        encodeMessage _ QueryStateNext{queryStateNextId = queryStateNextId}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryStateNextId)])
        decodeMessage _
          = (Hs.pure QueryStateNext) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "id")
                []
                "")]

instance HsJSONPB.ToJSONPB QueryStateNext where
        toJSONPB (QueryStateNext f1) = (HsJSONPB.object ["id" .= f1])
        toEncodingPB (QueryStateNext f1) = (HsJSONPB.pairs ["id" .= f1])

instance HsJSONPB.FromJSONPB QueryStateNext where
        parseJSONPB
          = (HsJSONPB.withObject "QueryStateNext"
               (\ obj -> (Hs.pure QueryStateNext) <*> obj .: "id"))

instance HsJSONPB.ToJSON QueryStateNext where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON QueryStateNext where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema QueryStateNext where
        declareNamedSchema _
          = do let declare_id = HsJSONPB.declareSchemaRef
               queryStateNextId <- declare_id Proxy.Proxy
               let _ = Hs.pure QueryStateNext <*> HsJSONPB.asProxy declare_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryStateNext",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("id", queryStateNextId)]}})

data QueryStateClose = QueryStateClose{queryStateCloseId ::
                                       Hs.Text}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named QueryStateClose where
        nameOf _ = (Hs.fromString "QueryStateClose")

instance HsProtobuf.HasDefault QueryStateClose

instance HsProtobuf.Message QueryStateClose where
        encodeMessage _
          QueryStateClose{queryStateCloseId = queryStateCloseId}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryStateCloseId)])
        decodeMessage _
          = (Hs.pure QueryStateClose) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "id")
                []
                "")]

instance HsJSONPB.ToJSONPB QueryStateClose where
        toJSONPB (QueryStateClose f1) = (HsJSONPB.object ["id" .= f1])
        toEncodingPB (QueryStateClose f1) = (HsJSONPB.pairs ["id" .= f1])

instance HsJSONPB.FromJSONPB QueryStateClose where
        parseJSONPB
          = (HsJSONPB.withObject "QueryStateClose"
               (\ obj -> (Hs.pure QueryStateClose) <*> obj .: "id"))

instance HsJSONPB.ToJSON QueryStateClose where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON QueryStateClose where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema QueryStateClose where
        declareNamedSchema _
          = do let declare_id = HsJSONPB.declareSchemaRef
               queryStateCloseId <- declare_id Proxy.Proxy
               let _ = Hs.pure QueryStateClose <*> HsJSONPB.asProxy declare_id
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryStateClose",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("id", queryStateCloseId)]}})

data QueryResultBytes = QueryResultBytes{queryResultBytesResultBytes
                                         :: Hs.ByteString}
                      deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named QueryResultBytes where
        nameOf _ = (Hs.fromString "QueryResultBytes")

instance HsProtobuf.HasDefault QueryResultBytes

instance HsProtobuf.Message QueryResultBytes where
        encodeMessage _
          QueryResultBytes{queryResultBytesResultBytes =
                             queryResultBytesResultBytes}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryResultBytesResultBytes)])
        decodeMessage _
          = (Hs.pure QueryResultBytes) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "resultBytes")
                []
                "")]

instance HsJSONPB.ToJSONPB QueryResultBytes where
        toJSONPB (QueryResultBytes f1)
          = (HsJSONPB.object ["resultBytes" .= f1])
        toEncodingPB (QueryResultBytes f1)
          = (HsJSONPB.pairs ["resultBytes" .= f1])

instance HsJSONPB.FromJSONPB QueryResultBytes where
        parseJSONPB
          = (HsJSONPB.withObject "QueryResultBytes"
               (\ obj -> (Hs.pure QueryResultBytes) <*> obj .: "resultBytes"))

instance HsJSONPB.ToJSON QueryResultBytes where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON QueryResultBytes where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema QueryResultBytes where
        declareNamedSchema _
          = do let declare_resultBytes = HsJSONPB.declareSchemaRef
               queryResultBytesResultBytes <- declare_resultBytes Proxy.Proxy
               let _ = Hs.pure QueryResultBytes <*>
                         HsJSONPB.asProxy declare_resultBytes
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryResultBytes",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("resultBytes",
                                                         queryResultBytesResultBytes)]}})

data QueryResponse = QueryResponse{queryResponseResults ::
                                   Hs.Vector Peer.ChaincodeShim.QueryResultBytes,
                                   queryResponseHasMore :: Hs.Bool, queryResponseId :: Hs.Text,
                                   queryResponseMetadata :: Hs.ByteString}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named QueryResponse where
        nameOf _ = (Hs.fromString "QueryResponse")

instance HsProtobuf.HasDefault QueryResponse

instance HsProtobuf.Message QueryResponse where
        encodeMessage _
          QueryResponse{queryResponseResults = queryResponseResults,
                        queryResponseHasMore = queryResponseHasMore,
                        queryResponseId = queryResponseId,
                        queryResponseMetadata = queryResponseMetadata}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Peer.ChaincodeShim.QueryResultBytes)
                      @(HsProtobuf.NestedVec Peer.ChaincodeShim.QueryResultBytes)
                      queryResponseResults)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   queryResponseHasMore),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   queryResponseId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   queryResponseMetadata)])
        decodeMessage _
          = (Hs.pure QueryResponse) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Peer.ChaincodeShim.QueryResultBytes))
                 @(_ (Hs.Vector Peer.ChaincodeShim.QueryResultBytes))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "QueryResultBytes")))
                (HsProtobuf.Single "results")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bool)
                (HsProtobuf.Single "has_more")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "metadata")
                []
                "")]

instance HsJSONPB.ToJSONPB QueryResponse where
        toJSONPB (QueryResponse f1 f2 f3 f4)
          = (HsJSONPB.object
               ["results" .= f1, "has_more" .= f2, "id" .= f3, "metadata" .= f4])
        toEncodingPB (QueryResponse f1 f2 f3 f4)
          = (HsJSONPB.pairs
               ["results" .= f1, "has_more" .= f2, "id" .= f3, "metadata" .= f4])

instance HsJSONPB.FromJSONPB QueryResponse where
        parseJSONPB
          = (HsJSONPB.withObject "QueryResponse"
               (\ obj ->
                  (Hs.pure QueryResponse) <*> obj .: "results" <*> obj .: "has_more"
                    <*> obj .: "id"
                    <*> obj .: "metadata"))

instance HsJSONPB.ToJSON QueryResponse where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON QueryResponse where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema QueryResponse where
        declareNamedSchema _
          = do let declare_results = HsJSONPB.declareSchemaRef
               queryResponseResults <- declare_results Proxy.Proxy
               let declare_has_more = HsJSONPB.declareSchemaRef
               queryResponseHasMore <- declare_has_more Proxy.Proxy
               let declare_id = HsJSONPB.declareSchemaRef
               queryResponseId <- declare_id Proxy.Proxy
               let declare_metadata = HsJSONPB.declareSchemaRef
               queryResponseMetadata <- declare_metadata Proxy.Proxy
               let _ = Hs.pure QueryResponse <*> HsJSONPB.asProxy declare_results
                         <*> HsJSONPB.asProxy declare_has_more
                         <*> HsJSONPB.asProxy declare_id
                         <*> HsJSONPB.asProxy declare_metadata
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryResponse",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("results", queryResponseResults),
                                                        ("has_more", queryResponseHasMore),
                                                        ("id", queryResponseId),
                                                        ("metadata", queryResponseMetadata)]}})

data QueryResponseMetadata = QueryResponseMetadata{queryResponseMetadataFetchedRecordsCount
                                                   :: Hs.Int32,
                                                   queryResponseMetadataBookmark :: Hs.Text}
                           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named QueryResponseMetadata where
        nameOf _ = (Hs.fromString "QueryResponseMetadata")

instance HsProtobuf.HasDefault QueryResponseMetadata

instance HsProtobuf.Message QueryResponseMetadata where
        encodeMessage _
          QueryResponseMetadata{queryResponseMetadataFetchedRecordsCount =
                                  queryResponseMetadataFetchedRecordsCount,
                                queryResponseMetadataBookmark = queryResponseMetadataBookmark}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   queryResponseMetadataFetchedRecordsCount),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   queryResponseMetadataBookmark)])
        decodeMessage _
          = (Hs.pure QueryResponseMetadata) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "fetched_records_count")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "bookmark")
                []
                "")]

instance HsJSONPB.ToJSONPB QueryResponseMetadata where
        toJSONPB (QueryResponseMetadata f1 f2)
          = (HsJSONPB.object
               ["fetched_records_count" .= f1, "bookmark" .= f2])
        toEncodingPB (QueryResponseMetadata f1 f2)
          = (HsJSONPB.pairs
               ["fetched_records_count" .= f1, "bookmark" .= f2])

instance HsJSONPB.FromJSONPB QueryResponseMetadata where
        parseJSONPB
          = (HsJSONPB.withObject "QueryResponseMetadata"
               (\ obj ->
                  (Hs.pure QueryResponseMetadata) <*> obj .: "fetched_records_count"
                    <*> obj .: "bookmark"))

instance HsJSONPB.ToJSON QueryResponseMetadata where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON QueryResponseMetadata where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema QueryResponseMetadata where
        declareNamedSchema _
          = do let declare_fetched_records_count = HsJSONPB.declareSchemaRef
               queryResponseMetadataFetchedRecordsCount <- declare_fetched_records_count
                                                             Proxy.Proxy
               let declare_bookmark = HsJSONPB.declareSchemaRef
               queryResponseMetadataBookmark <- declare_bookmark Proxy.Proxy
               let _ = Hs.pure QueryResponseMetadata <*>
                         HsJSONPB.asProxy declare_fetched_records_count
                         <*> HsJSONPB.asProxy declare_bookmark
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "QueryResponseMetadata",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("fetched_records_count",
                                                         queryResponseMetadataFetchedRecordsCount),
                                                        ("bookmark",
                                                         queryResponseMetadataBookmark)]}})

data StateMetadata = StateMetadata{stateMetadataMetakey :: Hs.Text,
                                   stateMetadataValue :: Hs.ByteString}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named StateMetadata where
        nameOf _ = (Hs.fromString "StateMetadata")

instance HsProtobuf.HasDefault StateMetadata

instance HsProtobuf.Message StateMetadata where
        encodeMessage _
          StateMetadata{stateMetadataMetakey = stateMetadataMetakey,
                        stateMetadataValue = stateMetadataValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   stateMetadataMetakey),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   stateMetadataValue)])
        decodeMessage _
          = (Hs.pure StateMetadata) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "metakey")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "value")
                []
                "")]

instance HsJSONPB.ToJSONPB StateMetadata where
        toJSONPB (StateMetadata f1 f2)
          = (HsJSONPB.object ["metakey" .= f1, "value" .= f2])
        toEncodingPB (StateMetadata f1 f2)
          = (HsJSONPB.pairs ["metakey" .= f1, "value" .= f2])

instance HsJSONPB.FromJSONPB StateMetadata where
        parseJSONPB
          = (HsJSONPB.withObject "StateMetadata"
               (\ obj ->
                  (Hs.pure StateMetadata) <*> obj .: "metakey" <*> obj .: "value"))

instance HsJSONPB.ToJSON StateMetadata where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON StateMetadata where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema StateMetadata where
        declareNamedSchema _
          = do let declare_metakey = HsJSONPB.declareSchemaRef
               stateMetadataMetakey <- declare_metakey Proxy.Proxy
               let declare_value = HsJSONPB.declareSchemaRef
               stateMetadataValue <- declare_value Proxy.Proxy
               let _ = Hs.pure StateMetadata <*> HsJSONPB.asProxy declare_metakey
                         <*> HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "StateMetadata",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("metakey", stateMetadataMetakey),
                                                        ("value", stateMetadataValue)]}})

data StateMetadataResult = StateMetadataResult{stateMetadataResultEntries
                                               :: Hs.Vector Peer.ChaincodeShim.StateMetadata}
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named StateMetadataResult where
        nameOf _ = (Hs.fromString "StateMetadataResult")

instance HsProtobuf.HasDefault StateMetadataResult

instance HsProtobuf.Message StateMetadataResult where
        encodeMessage _
          StateMetadataResult{stateMetadataResultEntries =
                                stateMetadataResultEntries}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Peer.ChaincodeShim.StateMetadata)
                      @(HsProtobuf.NestedVec Peer.ChaincodeShim.StateMetadata)
                      stateMetadataResultEntries))])
        decodeMessage _
          = (Hs.pure StateMetadataResult) <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Peer.ChaincodeShim.StateMetadata))
                 @(_ (Hs.Vector Peer.ChaincodeShim.StateMetadata))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "StateMetadata")))
                (HsProtobuf.Single "entries")
                []
                "")]

instance HsJSONPB.ToJSONPB StateMetadataResult where
        toJSONPB (StateMetadataResult f1)
          = (HsJSONPB.object ["entries" .= f1])
        toEncodingPB (StateMetadataResult f1)
          = (HsJSONPB.pairs ["entries" .= f1])

instance HsJSONPB.FromJSONPB StateMetadataResult where
        parseJSONPB
          = (HsJSONPB.withObject "StateMetadataResult"
               (\ obj -> (Hs.pure StateMetadataResult) <*> obj .: "entries"))

instance HsJSONPB.ToJSON StateMetadataResult where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON StateMetadataResult where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema StateMetadataResult where
        declareNamedSchema _
          = do let declare_entries = HsJSONPB.declareSchemaRef
               stateMetadataResultEntries <- declare_entries Proxy.Proxy
               let _ = Hs.pure StateMetadataResult <*>
                         HsJSONPB.asProxy declare_entries
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "StateMetadataResult",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("entries", stateMetadataResultEntries)]}})

data ChaincodeSupport request
     response = ChaincodeSupport{chaincodeSupportRegister ::
                                 request 'HsGRPC.BiDiStreaming Peer.ChaincodeShim.ChaincodeMessage
                                   Peer.ChaincodeShim.ChaincodeMessage
                                   ->
                                   Hs.IO
                                     (response 'HsGRPC.BiDiStreaming
                                        Peer.ChaincodeShim.ChaincodeMessage)}
              deriving Hs.Generic

chaincodeSupportServer ::
                         ChaincodeSupport HsGRPC.ServerRequest HsGRPC.ServerResponse ->
                           HsGRPC.ServiceOptions -> Hs.IO ()
chaincodeSupportServer
  ChaincodeSupport{chaincodeSupportRegister =
                     chaincodeSupportRegister}
  (ServiceOptions serverHost serverPort useCompression
     userAgentPrefix userAgentSuffix initialMetadata sslConfig logger)
  = (HsGRPC.serverLoop
       HsGRPC.defaultOptions{HsGRPC.optNormalHandlers = [],
                             HsGRPC.optClientStreamHandlers = [],
                             HsGRPC.optServerStreamHandlers = [],
                             HsGRPC.optBiDiStreamHandlers =
                               [(HsGRPC.BiDiStreamHandler
                                   (HsGRPC.MethodName "/protos.ChaincodeSupport/Register")
                                   (HsGRPC.convertGeneratedServerRWHandler
                                      chaincodeSupportRegister))],
                             optServerHost = serverHost, optServerPort = serverPort,
                             optUseCompression = useCompression,
                             optUserAgentPrefix = userAgentPrefix,
                             optUserAgentSuffix = userAgentSuffix,
                             optInitialMetadata = initialMetadata, optSSLConfig = sslConfig,
                             optLogger = logger})

chaincodeSupportClient ::
                         HsGRPC.Client ->
                           Hs.IO (ChaincodeSupport HsGRPC.ClientRequest HsGRPC.ClientResult)
chaincodeSupportClient client
  = (Hs.pure ChaincodeSupport) <*>
      ((Hs.pure (HsGRPC.clientRequest client)) <*>
         (HsGRPC.clientRegisterMethod client
            (HsGRPC.MethodName "/protos.ChaincodeSupport/Register")))
