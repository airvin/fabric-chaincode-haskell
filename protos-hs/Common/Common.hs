{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!

module Common.Common where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Google.Protobuf.Timestamp
 
data Status = StatusUNKNOWN
            | StatusSUCCESS
            | StatusBAD_REQUEST
            | StatusFORBIDDEN
            | StatusNOT_FOUND
            | StatusREQUEST_ENTITY_TOO_LARGE
            | StatusINTERNAL_SERVER_ERROR
            | StatusNOT_IMPLEMENTED
            | StatusSERVICE_UNAVAILABLE
            deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Status where
        nameOf _ = (Hs.fromString "Status")
 
instance HsProtobuf.HasDefault Status
 
instance Hs.Bounded Status where
        minBound = StatusUNKNOWN
        maxBound = StatusSERVICE_UNAVAILABLE
 
instance Hs.Ord Status where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum Status where
        toProtoEnumMay 0 = Hs.Just StatusUNKNOWN
        toProtoEnumMay 200 = Hs.Just StatusSUCCESS
        toProtoEnumMay 400 = Hs.Just StatusBAD_REQUEST
        toProtoEnumMay 403 = Hs.Just StatusFORBIDDEN
        toProtoEnumMay 404 = Hs.Just StatusNOT_FOUND
        toProtoEnumMay 413 = Hs.Just StatusREQUEST_ENTITY_TOO_LARGE
        toProtoEnumMay 500 = Hs.Just StatusINTERNAL_SERVER_ERROR
        toProtoEnumMay 501 = Hs.Just StatusNOT_IMPLEMENTED
        toProtoEnumMay 503 = Hs.Just StatusSERVICE_UNAVAILABLE
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (StatusUNKNOWN) = 0
        fromProtoEnum (StatusSUCCESS) = 200
        fromProtoEnum (StatusBAD_REQUEST) = 400
        fromProtoEnum (StatusFORBIDDEN) = 403
        fromProtoEnum (StatusNOT_FOUND) = 404
        fromProtoEnum (StatusREQUEST_ENTITY_TOO_LARGE) = 413
        fromProtoEnum (StatusINTERNAL_SERVER_ERROR) = 500
        fromProtoEnum (StatusNOT_IMPLEMENTED) = 501
        fromProtoEnum (StatusSERVICE_UNAVAILABLE) = 503
 
instance HsJSONPB.ToJSONPB Status where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB Status where
        parseJSONPB (HsJSONPB.String "UNKNOWN") = Hs.pure StatusUNKNOWN
        parseJSONPB (HsJSONPB.String "SUCCESS") = Hs.pure StatusSUCCESS
        parseJSONPB (HsJSONPB.String "BAD_REQUEST")
          = Hs.pure StatusBAD_REQUEST
        parseJSONPB (HsJSONPB.String "FORBIDDEN") = Hs.pure StatusFORBIDDEN
        parseJSONPB (HsJSONPB.String "NOT_FOUND") = Hs.pure StatusNOT_FOUND
        parseJSONPB (HsJSONPB.String "REQUEST_ENTITY_TOO_LARGE")
          = Hs.pure StatusREQUEST_ENTITY_TOO_LARGE
        parseJSONPB (HsJSONPB.String "INTERNAL_SERVER_ERROR")
          = Hs.pure StatusINTERNAL_SERVER_ERROR
        parseJSONPB (HsJSONPB.String "NOT_IMPLEMENTED")
          = Hs.pure StatusNOT_IMPLEMENTED
        parseJSONPB (HsJSONPB.String "SERVICE_UNAVAILABLE")
          = Hs.pure StatusSERVICE_UNAVAILABLE
        parseJSONPB v = (HsJSONPB.typeMismatch "Status" v)
 
instance HsJSONPB.ToJSON Status where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Status where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite Status
 
data HeaderType = HeaderTypeMESSAGE
                | HeaderTypeCONFIG
                | HeaderTypeCONFIG_UPDATE
                | HeaderTypeENDORSER_TRANSACTION
                | HeaderTypeORDERER_TRANSACTION
                | HeaderTypeDELIVER_SEEK_INFO
                | HeaderTypeCHAINCODE_PACKAGE
                | HeaderTypePEER_ADMIN_OPERATION
                | HeaderTypeTOKEN_TRANSACTION
                deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named HeaderType where
        nameOf _ = (Hs.fromString "HeaderType")
 
instance HsProtobuf.HasDefault HeaderType
 
instance Hs.Bounded HeaderType where
        minBound = HeaderTypeMESSAGE
        maxBound = HeaderTypeTOKEN_TRANSACTION
 
instance Hs.Ord HeaderType where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum HeaderType where
        toProtoEnumMay 0 = Hs.Just HeaderTypeMESSAGE
        toProtoEnumMay 1 = Hs.Just HeaderTypeCONFIG
        toProtoEnumMay 2 = Hs.Just HeaderTypeCONFIG_UPDATE
        toProtoEnumMay 3 = Hs.Just HeaderTypeENDORSER_TRANSACTION
        toProtoEnumMay 4 = Hs.Just HeaderTypeORDERER_TRANSACTION
        toProtoEnumMay 5 = Hs.Just HeaderTypeDELIVER_SEEK_INFO
        toProtoEnumMay 6 = Hs.Just HeaderTypeCHAINCODE_PACKAGE
        toProtoEnumMay 8 = Hs.Just HeaderTypePEER_ADMIN_OPERATION
        toProtoEnumMay 9 = Hs.Just HeaderTypeTOKEN_TRANSACTION
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (HeaderTypeMESSAGE) = 0
        fromProtoEnum (HeaderTypeCONFIG) = 1
        fromProtoEnum (HeaderTypeCONFIG_UPDATE) = 2
        fromProtoEnum (HeaderTypeENDORSER_TRANSACTION) = 3
        fromProtoEnum (HeaderTypeORDERER_TRANSACTION) = 4
        fromProtoEnum (HeaderTypeDELIVER_SEEK_INFO) = 5
        fromProtoEnum (HeaderTypeCHAINCODE_PACKAGE) = 6
        fromProtoEnum (HeaderTypePEER_ADMIN_OPERATION) = 8
        fromProtoEnum (HeaderTypeTOKEN_TRANSACTION) = 9
 
instance HsJSONPB.ToJSONPB HeaderType where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB HeaderType where
        parseJSONPB (HsJSONPB.String "MESSAGE") = Hs.pure HeaderTypeMESSAGE
        parseJSONPB (HsJSONPB.String "CONFIG") = Hs.pure HeaderTypeCONFIG
        parseJSONPB (HsJSONPB.String "CONFIG_UPDATE")
          = Hs.pure HeaderTypeCONFIG_UPDATE
        parseJSONPB (HsJSONPB.String "ENDORSER_TRANSACTION")
          = Hs.pure HeaderTypeENDORSER_TRANSACTION
        parseJSONPB (HsJSONPB.String "ORDERER_TRANSACTION")
          = Hs.pure HeaderTypeORDERER_TRANSACTION
        parseJSONPB (HsJSONPB.String "DELIVER_SEEK_INFO")
          = Hs.pure HeaderTypeDELIVER_SEEK_INFO
        parseJSONPB (HsJSONPB.String "CHAINCODE_PACKAGE")
          = Hs.pure HeaderTypeCHAINCODE_PACKAGE
        parseJSONPB (HsJSONPB.String "PEER_ADMIN_OPERATION")
          = Hs.pure HeaderTypePEER_ADMIN_OPERATION
        parseJSONPB (HsJSONPB.String "TOKEN_TRANSACTION")
          = Hs.pure HeaderTypeTOKEN_TRANSACTION
        parseJSONPB v = (HsJSONPB.typeMismatch "HeaderType" v)
 
instance HsJSONPB.ToJSON HeaderType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON HeaderType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite HeaderType
 
data BlockMetadataIndex = BlockMetadataIndexSIGNATURES
                        | BlockMetadataIndexLAST_CONFIG
                        | BlockMetadataIndexTRANSACTIONS_FILTER
                        | BlockMetadataIndexORDERER
                        | BlockMetadataIndexCOMMIT_HASH
                        deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named BlockMetadataIndex where
        nameOf _ = (Hs.fromString "BlockMetadataIndex")
 
instance HsProtobuf.HasDefault BlockMetadataIndex
 
instance Hs.Bounded BlockMetadataIndex where
        minBound = BlockMetadataIndexSIGNATURES
        maxBound = BlockMetadataIndexCOMMIT_HASH
 
instance Hs.Ord BlockMetadataIndex where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum BlockMetadataIndex where
        toProtoEnumMay 0 = Hs.Just BlockMetadataIndexSIGNATURES
        toProtoEnumMay 1 = Hs.Just BlockMetadataIndexLAST_CONFIG
        toProtoEnumMay 2 = Hs.Just BlockMetadataIndexTRANSACTIONS_FILTER
        toProtoEnumMay 3 = Hs.Just BlockMetadataIndexORDERER
        toProtoEnumMay 4 = Hs.Just BlockMetadataIndexCOMMIT_HASH
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (BlockMetadataIndexSIGNATURES) = 0
        fromProtoEnum (BlockMetadataIndexLAST_CONFIG) = 1
        fromProtoEnum (BlockMetadataIndexTRANSACTIONS_FILTER) = 2
        fromProtoEnum (BlockMetadataIndexORDERER) = 3
        fromProtoEnum (BlockMetadataIndexCOMMIT_HASH) = 4
 
instance HsJSONPB.ToJSONPB BlockMetadataIndex where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB BlockMetadataIndex where
        parseJSONPB (HsJSONPB.String "SIGNATURES")
          = Hs.pure BlockMetadataIndexSIGNATURES
        parseJSONPB (HsJSONPB.String "LAST_CONFIG")
          = Hs.pure BlockMetadataIndexLAST_CONFIG
        parseJSONPB (HsJSONPB.String "TRANSACTIONS_FILTER")
          = Hs.pure BlockMetadataIndexTRANSACTIONS_FILTER
        parseJSONPB (HsJSONPB.String "ORDERER")
          = Hs.pure BlockMetadataIndexORDERER
        parseJSONPB (HsJSONPB.String "COMMIT_HASH")
          = Hs.pure BlockMetadataIndexCOMMIT_HASH
        parseJSONPB v = (HsJSONPB.typeMismatch "BlockMetadataIndex" v)
 
instance HsJSONPB.ToJSON BlockMetadataIndex where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON BlockMetadataIndex where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite BlockMetadataIndex
 
newtype LastConfig = LastConfig{lastConfigIndex :: Hs.Word64}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named LastConfig where
        nameOf _ = (Hs.fromString "LastConfig")
 
instance HsProtobuf.HasDefault LastConfig
 
instance HsProtobuf.Message LastConfig where
        encodeMessage _ LastConfig{lastConfigIndex = lastConfigIndex}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   lastConfigIndex)])
        decodeMessage _
          = (Hs.pure LastConfig) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "index")
                []
                "")]
 
instance HsJSONPB.ToJSONPB LastConfig where
        toJSONPB (LastConfig f1) = (HsJSONPB.object ["index" .= f1])
        toEncodingPB (LastConfig f1) = (HsJSONPB.pairs ["index" .= f1])
 
instance HsJSONPB.FromJSONPB LastConfig where
        parseJSONPB
          = (HsJSONPB.withObject "LastConfig"
               (\ obj -> (Hs.pure LastConfig) <*> obj .: "index"))
 
instance HsJSONPB.ToJSON LastConfig where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON LastConfig where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema LastConfig where
        declareNamedSchema _
          = do let declare_index = HsJSONPB.declareSchemaRef
               lastConfigIndex <- declare_index Proxy.Proxy
               let _ = Hs.pure LastConfig <*> HsJSONPB.asProxy declare_index
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "LastConfig",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("index", lastConfigIndex)]}})
 
data Metadata = Metadata{metadataValue :: Hs.ByteString,
                         metadataSignatures :: Hs.Vector Common.Common.MetadataSignature}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Metadata where
        nameOf _ = (Hs.fromString "Metadata")
 
instance HsProtobuf.HasDefault Metadata
 
instance HsProtobuf.Message Metadata where
        encodeMessage _
          Metadata{metadataValue = metadataValue,
                   metadataSignatures = metadataSignatures}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   metadataValue),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Vector Common.Common.MetadataSignature)
                      @(HsProtobuf.NestedVec Common.Common.MetadataSignature)
                      metadataSignatures))])
        decodeMessage _
          = (Hs.pure Metadata) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Common.Common.MetadataSignature))
                 @(_ (Hs.Vector Common.Common.MetadataSignature))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "value")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "MetadataSignature")))
                (HsProtobuf.Single "signatures")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Metadata where
        toJSONPB (Metadata f1 f2)
          = (HsJSONPB.object ["value" .= f1, "signatures" .= f2])
        toEncodingPB (Metadata f1 f2)
          = (HsJSONPB.pairs ["value" .= f1, "signatures" .= f2])
 
instance HsJSONPB.FromJSONPB Metadata where
        parseJSONPB
          = (HsJSONPB.withObject "Metadata"
               (\ obj ->
                  (Hs.pure Metadata) <*> obj .: "value" <*> obj .: "signatures"))
 
instance HsJSONPB.ToJSON Metadata where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Metadata where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Metadata where
        declareNamedSchema _
          = do let declare_value = HsJSONPB.declareSchemaRef
               metadataValue <- declare_value Proxy.Proxy
               let declare_signatures = HsJSONPB.declareSchemaRef
               metadataSignatures <- declare_signatures Proxy.Proxy
               let _ = Hs.pure Metadata <*> HsJSONPB.asProxy declare_value <*>
                         HsJSONPB.asProxy declare_signatures
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Metadata",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("value", metadataValue),
                                                        ("signatures", metadataSignatures)]}})
 
data MetadataSignature = MetadataSignature{metadataSignatureSignatureHeader
                                           :: Hs.ByteString,
                                           metadataSignatureSignature :: Hs.ByteString}
                       deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named MetadataSignature where
        nameOf _ = (Hs.fromString "MetadataSignature")
 
instance HsProtobuf.HasDefault MetadataSignature
 
instance HsProtobuf.Message MetadataSignature where
        encodeMessage _
          MetadataSignature{metadataSignatureSignatureHeader =
                              metadataSignatureSignatureHeader,
                            metadataSignatureSignature = metadataSignatureSignature}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   metadataSignatureSignatureHeader),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   metadataSignatureSignature)])
        decodeMessage _
          = (Hs.pure MetadataSignature) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "signature_header")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "signature")
                []
                "")]
 
instance HsJSONPB.ToJSONPB MetadataSignature where
        toJSONPB (MetadataSignature f1 f2)
          = (HsJSONPB.object ["signature_header" .= f1, "signature" .= f2])
        toEncodingPB (MetadataSignature f1 f2)
          = (HsJSONPB.pairs ["signature_header" .= f1, "signature" .= f2])
 
instance HsJSONPB.FromJSONPB MetadataSignature where
        parseJSONPB
          = (HsJSONPB.withObject "MetadataSignature"
               (\ obj ->
                  (Hs.pure MetadataSignature) <*> obj .: "signature_header" <*>
                    obj .: "signature"))
 
instance HsJSONPB.ToJSON MetadataSignature where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON MetadataSignature where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema MetadataSignature where
        declareNamedSchema _
          = do let declare_signature_header = HsJSONPB.declareSchemaRef
               metadataSignatureSignatureHeader <- declare_signature_header
                                                     Proxy.Proxy
               let declare_signature = HsJSONPB.declareSchemaRef
               metadataSignatureSignature <- declare_signature Proxy.Proxy
               let _ = Hs.pure MetadataSignature <*>
                         HsJSONPB.asProxy declare_signature_header
                         <*> HsJSONPB.asProxy declare_signature
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "MetadataSignature",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("signature_header",
                                                         metadataSignatureSignatureHeader),
                                                        ("signature",
                                                         metadataSignatureSignature)]}})
 
data Header = Header{headerChannelHeader :: Hs.ByteString,
                     headerSignatureHeader :: Hs.ByteString}
            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Header where
        nameOf _ = (Hs.fromString "Header")
 
instance HsProtobuf.HasDefault Header
 
instance HsProtobuf.Message Header where
        encodeMessage _
          Header{headerChannelHeader = headerChannelHeader,
                 headerSignatureHeader = headerSignatureHeader}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   headerChannelHeader),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   headerSignatureHeader)])
        decodeMessage _
          = (Hs.pure Header) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "channel_header")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "signature_header")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Header where
        toJSONPB (Header f1 f2)
          = (HsJSONPB.object
               ["channel_header" .= f1, "signature_header" .= f2])
        toEncodingPB (Header f1 f2)
          = (HsJSONPB.pairs
               ["channel_header" .= f1, "signature_header" .= f2])
 
instance HsJSONPB.FromJSONPB Header where
        parseJSONPB
          = (HsJSONPB.withObject "Header"
               (\ obj ->
                  (Hs.pure Header) <*> obj .: "channel_header" <*>
                    obj .: "signature_header"))
 
instance HsJSONPB.ToJSON Header where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Header where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Header where
        declareNamedSchema _
          = do let declare_channel_header = HsJSONPB.declareSchemaRef
               headerChannelHeader <- declare_channel_header Proxy.Proxy
               let declare_signature_header = HsJSONPB.declareSchemaRef
               headerSignatureHeader <- declare_signature_header Proxy.Proxy
               let _ = Hs.pure Header <*> HsJSONPB.asProxy declare_channel_header
                         <*> HsJSONPB.asProxy declare_signature_header
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Header",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("channel_header", headerChannelHeader),
                                                        ("signature_header",
                                                         headerSignatureHeader)]}})
 
data ChannelHeader = ChannelHeader{channelHeaderType :: Hs.Int32,
                                   channelHeaderVersion :: Hs.Int32,
                                   channelHeaderTimestamp ::
                                   Hs.Maybe Google.Protobuf.Timestamp.Timestamp,
                                   channelHeaderChannelId :: Hs.Text, channelHeaderTxId :: Hs.Text,
                                   channelHeaderEpoch :: Hs.Word64,
                                   channelHeaderExtension :: Hs.ByteString,
                                   channelHeaderTlsCertHash :: Hs.ByteString}
                   deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ChannelHeader where
        nameOf _ = (Hs.fromString "ChannelHeader")
 
instance HsProtobuf.HasDefault ChannelHeader
 
instance HsProtobuf.Message ChannelHeader where
        encodeMessage _
          ChannelHeader{channelHeaderType = channelHeaderType,
                        channelHeaderVersion = channelHeaderVersion,
                        channelHeaderTimestamp = channelHeaderTimestamp,
                        channelHeaderChannelId = channelHeaderChannelId,
                        channelHeaderTxId = channelHeaderTxId,
                        channelHeaderEpoch = channelHeaderEpoch,
                        channelHeaderExtension = channelHeaderExtension,
                        channelHeaderTlsCertHash = channelHeaderTlsCertHash}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   channelHeaderType),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   channelHeaderVersion),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                      @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                      channelHeaderTimestamp)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   channelHeaderChannelId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 5)
                   channelHeaderTxId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 6)
                   channelHeaderEpoch),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 7)
                   channelHeaderExtension),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 8)
                   channelHeaderTlsCertHash)])
        decodeMessage _
          = (Hs.pure ChannelHeader) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp))
                 @(_ (Hs.Maybe Google.Protobuf.Timestamp.Timestamp))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 5))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 6))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 7))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 8))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "version")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim
                   (HsProtobuf.Named
                      (HsProtobuf.Dots
                         (HsProtobuf.Path ("google" Hs.:| ["protobuf", "Timestamp"])))))
                (HsProtobuf.Single "timestamp")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "channel_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 5)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "tx_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 6)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "epoch")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 7)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "extension")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 8)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "tls_cert_hash")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ChannelHeader where
        toJSONPB (ChannelHeader f1 f2 f3 f4 f5 f6 f7 f8)
          = (HsJSONPB.object
               ["type" .= f1, "version" .= f2, "timestamp" .= f3,
                "channel_id" .= f4, "tx_id" .= f5, "epoch" .= f6,
                "extension" .= f7, "tls_cert_hash" .= f8])
        toEncodingPB (ChannelHeader f1 f2 f3 f4 f5 f6 f7 f8)
          = (HsJSONPB.pairs
               ["type" .= f1, "version" .= f2, "timestamp" .= f3,
                "channel_id" .= f4, "tx_id" .= f5, "epoch" .= f6,
                "extension" .= f7, "tls_cert_hash" .= f8])
 
instance HsJSONPB.FromJSONPB ChannelHeader where
        parseJSONPB
          = (HsJSONPB.withObject "ChannelHeader"
               (\ obj ->
                  (Hs.pure ChannelHeader) <*> obj .: "type" <*> obj .: "version" <*>
                    obj .: "timestamp"
                    <*> obj .: "channel_id"
                    <*> obj .: "tx_id"
                    <*> obj .: "epoch"
                    <*> obj .: "extension"
                    <*> obj .: "tls_cert_hash"))
 
instance HsJSONPB.ToJSON ChannelHeader where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ChannelHeader where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ChannelHeader where
        declareNamedSchema _
          = do let declare_type = HsJSONPB.declareSchemaRef
               channelHeaderType <- declare_type Proxy.Proxy
               let declare_version = HsJSONPB.declareSchemaRef
               channelHeaderVersion <- declare_version Proxy.Proxy
               let declare_timestamp = HsJSONPB.declareSchemaRef
               channelHeaderTimestamp <- declare_timestamp Proxy.Proxy
               let declare_channel_id = HsJSONPB.declareSchemaRef
               channelHeaderChannelId <- declare_channel_id Proxy.Proxy
               let declare_tx_id = HsJSONPB.declareSchemaRef
               channelHeaderTxId <- declare_tx_id Proxy.Proxy
               let declare_epoch = HsJSONPB.declareSchemaRef
               channelHeaderEpoch <- declare_epoch Proxy.Proxy
               let declare_extension = HsJSONPB.declareSchemaRef
               channelHeaderExtension <- declare_extension Proxy.Proxy
               let declare_tls_cert_hash = HsJSONPB.declareSchemaRef
               channelHeaderTlsCertHash <- declare_tls_cert_hash Proxy.Proxy
               let _ = Hs.pure ChannelHeader <*> HsJSONPB.asProxy declare_type <*>
                         HsJSONPB.asProxy declare_version
                         <*> HsJSONPB.asProxy declare_timestamp
                         <*> HsJSONPB.asProxy declare_channel_id
                         <*> HsJSONPB.asProxy declare_tx_id
                         <*> HsJSONPB.asProxy declare_epoch
                         <*> HsJSONPB.asProxy declare_extension
                         <*> HsJSONPB.asProxy declare_tls_cert_hash
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ChannelHeader",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("type", channelHeaderType),
                                                        ("version", channelHeaderVersion),
                                                        ("timestamp", channelHeaderTimestamp),
                                                        ("channel_id", channelHeaderChannelId),
                                                        ("tx_id", channelHeaderTxId),
                                                        ("epoch", channelHeaderEpoch),
                                                        ("extension", channelHeaderExtension),
                                                        ("tls_cert_hash",
                                                         channelHeaderTlsCertHash)]}})
 
data SignatureHeader = SignatureHeader{signatureHeaderCreator ::
                                       Hs.ByteString,
                                       signatureHeaderNonce :: Hs.ByteString}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SignatureHeader where
        nameOf _ = (Hs.fromString "SignatureHeader")
 
instance HsProtobuf.HasDefault SignatureHeader
 
instance HsProtobuf.Message SignatureHeader where
        encodeMessage _
          SignatureHeader{signatureHeaderCreator = signatureHeaderCreator,
                          signatureHeaderNonce = signatureHeaderNonce}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   signatureHeaderCreator),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   signatureHeaderNonce)])
        decodeMessage _
          = (Hs.pure SignatureHeader) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "creator")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "nonce")
                []
                "")]
 
instance HsJSONPB.ToJSONPB SignatureHeader where
        toJSONPB (SignatureHeader f1 f2)
          = (HsJSONPB.object ["creator" .= f1, "nonce" .= f2])
        toEncodingPB (SignatureHeader f1 f2)
          = (HsJSONPB.pairs ["creator" .= f1, "nonce" .= f2])
 
instance HsJSONPB.FromJSONPB SignatureHeader where
        parseJSONPB
          = (HsJSONPB.withObject "SignatureHeader"
               (\ obj ->
                  (Hs.pure SignatureHeader) <*> obj .: "creator" <*> obj .: "nonce"))
 
instance HsJSONPB.ToJSON SignatureHeader where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON SignatureHeader where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema SignatureHeader where
        declareNamedSchema _
          = do let declare_creator = HsJSONPB.declareSchemaRef
               signatureHeaderCreator <- declare_creator Proxy.Proxy
               let declare_nonce = HsJSONPB.declareSchemaRef
               signatureHeaderNonce <- declare_nonce Proxy.Proxy
               let _ = Hs.pure SignatureHeader <*>
                         HsJSONPB.asProxy declare_creator
                         <*> HsJSONPB.asProxy declare_nonce
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SignatureHeader",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("creator", signatureHeaderCreator),
                                                        ("nonce", signatureHeaderNonce)]}})
 
data Payload = Payload{payloadHeader ::
                       Hs.Maybe Common.Common.Header,
                       payloadData :: Hs.ByteString}
             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Payload where
        nameOf _ = (Hs.fromString "Payload")
 
instance HsProtobuf.HasDefault Payload
 
instance HsProtobuf.Message Payload where
        encodeMessage _
          Payload{payloadHeader = payloadHeader, payloadData = payloadData}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Common.Common.Header)
                      @(HsProtobuf.Nested Common.Common.Header)
                      payloadHeader)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   payloadData)])
        decodeMessage _
          = (Hs.pure Payload) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Common.Common.Header))
                 @(_ (Hs.Maybe Common.Common.Header))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Header")))
                (HsProtobuf.Single "header")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "data")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Payload where
        toJSONPB (Payload f1 f2)
          = (HsJSONPB.object ["header" .= f1, "data" .= f2])
        toEncodingPB (Payload f1 f2)
          = (HsJSONPB.pairs ["header" .= f1, "data" .= f2])
 
instance HsJSONPB.FromJSONPB Payload where
        parseJSONPB
          = (HsJSONPB.withObject "Payload"
               (\ obj -> (Hs.pure Payload) <*> obj .: "header" <*> obj .: "data"))
 
instance HsJSONPB.ToJSON Payload where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Payload where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Payload where
        declareNamedSchema _
          = do let declare_header = HsJSONPB.declareSchemaRef
               payloadHeader <- declare_header Proxy.Proxy
               let declare_data = HsJSONPB.declareSchemaRef
               payloadData <- declare_data Proxy.Proxy
               let _ = Hs.pure Payload <*> HsJSONPB.asProxy declare_header <*>
                         HsJSONPB.asProxy declare_data
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Payload",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("header", payloadHeader),
                                                        ("data", payloadData)]}})
 
data Envelope = Envelope{envelopePayload :: Hs.ByteString,
                         envelopeSignature :: Hs.ByteString}
              deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Envelope where
        nameOf _ = (Hs.fromString "Envelope")
 
instance HsProtobuf.HasDefault Envelope
 
instance HsProtobuf.Message Envelope where
        encodeMessage _
          Envelope{envelopePayload = envelopePayload,
                   envelopeSignature = envelopeSignature}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   envelopePayload),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   envelopeSignature)])
        decodeMessage _
          = (Hs.pure Envelope) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "payload")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "signature")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Envelope where
        toJSONPB (Envelope f1 f2)
          = (HsJSONPB.object ["payload" .= f1, "signature" .= f2])
        toEncodingPB (Envelope f1 f2)
          = (HsJSONPB.pairs ["payload" .= f1, "signature" .= f2])
 
instance HsJSONPB.FromJSONPB Envelope where
        parseJSONPB
          = (HsJSONPB.withObject "Envelope"
               (\ obj ->
                  (Hs.pure Envelope) <*> obj .: "payload" <*> obj .: "signature"))
 
instance HsJSONPB.ToJSON Envelope where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Envelope where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Envelope where
        declareNamedSchema _
          = do let declare_payload = HsJSONPB.declareSchemaRef
               envelopePayload <- declare_payload Proxy.Proxy
               let declare_signature = HsJSONPB.declareSchemaRef
               envelopeSignature <- declare_signature Proxy.Proxy
               let _ = Hs.pure Envelope <*> HsJSONPB.asProxy declare_payload <*>
                         HsJSONPB.asProxy declare_signature
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "Envelope",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("payload", envelopePayload),
                                                        ("signature", envelopeSignature)]}})
 
data Block = Block{blockHeader ::
                   Hs.Maybe Common.Common.BlockHeader,
                   blockData :: Hs.Maybe Common.Common.BlockData,
                   blockMetadata :: Hs.Maybe Common.Common.BlockMetadata}
           deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Block where
        nameOf _ = (Hs.fromString "Block")
 
instance HsProtobuf.HasDefault Block
 
instance HsProtobuf.Message Block where
        encodeMessage _
          Block{blockHeader = blockHeader, blockData = blockData,
                blockMetadata = blockMetadata}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Common.Common.BlockHeader)
                      @(HsProtobuf.Nested Common.Common.BlockHeader)
                      blockHeader)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Common.Common.BlockData)
                      @(HsProtobuf.Nested Common.Common.BlockData)
                      blockData)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Maybe Common.Common.BlockMetadata)
                      @(HsProtobuf.Nested Common.Common.BlockMetadata)
                      blockMetadata))])
        decodeMessage _
          = (Hs.pure Block) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Common.Common.BlockHeader))
                 @(_ (Hs.Maybe Common.Common.BlockHeader))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Common.Common.BlockData))
                 @(_ (Hs.Maybe Common.Common.BlockData))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Common.Common.BlockMetadata))
                 @(_ (Hs.Maybe Common.Common.BlockMetadata))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "BlockHeader")))
                (HsProtobuf.Single "header")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "BlockData")))
                (HsProtobuf.Single "data")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "BlockMetadata")))
                (HsProtobuf.Single "metadata")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Block where
        toJSONPB (Block f1 f2 f3)
          = (HsJSONPB.object
               ["header" .= f1, "data" .= f2, "metadata" .= f3])
        toEncodingPB (Block f1 f2 f3)
          = (HsJSONPB.pairs ["header" .= f1, "data" .= f2, "metadata" .= f3])
 
instance HsJSONPB.FromJSONPB Block where
        parseJSONPB
          = (HsJSONPB.withObject "Block"
               (\ obj ->
                  (Hs.pure Block) <*> obj .: "header" <*> obj .: "data" <*>
                    obj .: "metadata"))
 
instance HsJSONPB.ToJSON Block where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Block where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Block where
        declareNamedSchema _
          = do let declare_header = HsJSONPB.declareSchemaRef
               blockHeader <- declare_header Proxy.Proxy
               let declare_data = HsJSONPB.declareSchemaRef
               blockData <- declare_data Proxy.Proxy
               let declare_metadata = HsJSONPB.declareSchemaRef
               blockMetadata <- declare_metadata Proxy.Proxy
               let _ = Hs.pure Block <*> HsJSONPB.asProxy declare_header <*>
                         HsJSONPB.asProxy declare_data
                         <*> HsJSONPB.asProxy declare_metadata
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Block",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("header", blockHeader),
                                                        ("data", blockData),
                                                        ("metadata", blockMetadata)]}})
 
data BlockHeader = BlockHeader{blockHeaderNumber :: Hs.Word64,
                               blockHeaderPreviousHash :: Hs.ByteString,
                               blockHeaderDataHash :: Hs.ByteString}
                 deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named BlockHeader where
        nameOf _ = (Hs.fromString "BlockHeader")
 
instance HsProtobuf.HasDefault BlockHeader
 
instance HsProtobuf.Message BlockHeader where
        encodeMessage _
          BlockHeader{blockHeaderNumber = blockHeaderNumber,
                      blockHeaderPreviousHash = blockHeaderPreviousHash,
                      blockHeaderDataHash = blockHeaderDataHash}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   blockHeaderNumber),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   blockHeaderPreviousHash),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   blockHeaderDataHash)])
        decodeMessage _
          = (Hs.pure BlockHeader) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.UInt64)
                (HsProtobuf.Single "number")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "previous_hash")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "data_hash")
                []
                "")]
 
instance HsJSONPB.ToJSONPB BlockHeader where
        toJSONPB (BlockHeader f1 f2 f3)
          = (HsJSONPB.object
               ["number" .= f1, "previous_hash" .= f2, "data_hash" .= f3])
        toEncodingPB (BlockHeader f1 f2 f3)
          = (HsJSONPB.pairs
               ["number" .= f1, "previous_hash" .= f2, "data_hash" .= f3])
 
instance HsJSONPB.FromJSONPB BlockHeader where
        parseJSONPB
          = (HsJSONPB.withObject "BlockHeader"
               (\ obj ->
                  (Hs.pure BlockHeader) <*> obj .: "number" <*>
                    obj .: "previous_hash"
                    <*> obj .: "data_hash"))
 
instance HsJSONPB.ToJSON BlockHeader where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON BlockHeader where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema BlockHeader where
        declareNamedSchema _
          = do let declare_number = HsJSONPB.declareSchemaRef
               blockHeaderNumber <- declare_number Proxy.Proxy
               let declare_previous_hash = HsJSONPB.declareSchemaRef
               blockHeaderPreviousHash <- declare_previous_hash Proxy.Proxy
               let declare_data_hash = HsJSONPB.declareSchemaRef
               blockHeaderDataHash <- declare_data_hash Proxy.Proxy
               let _ = Hs.pure BlockHeader <*> HsJSONPB.asProxy declare_number <*>
                         HsJSONPB.asProxy declare_previous_hash
                         <*> HsJSONPB.asProxy declare_data_hash
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "BlockHeader",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("number", blockHeaderNumber),
                                                        ("previous_hash", blockHeaderPreviousHash),
                                                        ("data_hash", blockHeaderDataHash)]}})
 
newtype BlockData = BlockData{blockDataData ::
                              Hs.Vector Hs.ByteString}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named BlockData where
        nameOf _ = (Hs.fromString "BlockData")
 
instance HsProtobuf.HasDefault BlockData
 
instance HsProtobuf.Message BlockData where
        encodeMessage _ BlockData{blockDataData = blockDataData}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Hs.ByteString)
                      @(HsProtobuf.UnpackedVec Hs.ByteString)
                      blockDataData))])
        decodeMessage _
          = (Hs.pure BlockData) <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.ByteString))
                 @(_ (Hs.Vector Hs.ByteString))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated HsProtobuf.Bytes)
                (HsProtobuf.Single "data")
                []
                "")]
 
instance HsJSONPB.ToJSONPB BlockData where
        toJSONPB (BlockData f1) = (HsJSONPB.object ["data" .= f1])
        toEncodingPB (BlockData f1) = (HsJSONPB.pairs ["data" .= f1])
 
instance HsJSONPB.FromJSONPB BlockData where
        parseJSONPB
          = (HsJSONPB.withObject "BlockData"
               (\ obj -> (Hs.pure BlockData) <*> obj .: "data"))
 
instance HsJSONPB.ToJSON BlockData where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON BlockData where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema BlockData where
        declareNamedSchema _
          = do let declare_data = HsJSONPB.declareSchemaRef
               blockDataData <- declare_data Proxy.Proxy
               let _ = Hs.pure BlockData <*> HsJSONPB.asProxy declare_data
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "BlockData",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("data", blockDataData)]}})
 
newtype BlockMetadata = BlockMetadata{blockMetadataMetadata ::
                                      Hs.Vector Hs.ByteString}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named BlockMetadata where
        nameOf _ = (Hs.fromString "BlockMetadata")
 
instance HsProtobuf.HasDefault BlockMetadata
 
instance HsProtobuf.Message BlockMetadata where
        encodeMessage _
          BlockMetadata{blockMetadataMetadata = blockMetadataMetadata}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Vector Hs.ByteString)
                      @(HsProtobuf.UnpackedVec Hs.ByteString)
                      blockMetadataMetadata))])
        decodeMessage _
          = (Hs.pure BlockMetadata) <*>
              (Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.ByteString))
                 @(_ (Hs.Vector Hs.ByteString))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Repeated HsProtobuf.Bytes)
                (HsProtobuf.Single "metadata")
                []
                "")]
 
instance HsJSONPB.ToJSONPB BlockMetadata where
        toJSONPB (BlockMetadata f1) = (HsJSONPB.object ["metadata" .= f1])
        toEncodingPB (BlockMetadata f1)
          = (HsJSONPB.pairs ["metadata" .= f1])
 
instance HsJSONPB.FromJSONPB BlockMetadata where
        parseJSONPB
          = (HsJSONPB.withObject "BlockMetadata"
               (\ obj -> (Hs.pure BlockMetadata) <*> obj .: "metadata"))
 
instance HsJSONPB.ToJSON BlockMetadata where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON BlockMetadata where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema BlockMetadata where
        declareNamedSchema _
          = do let declare_metadata = HsJSONPB.declareSchemaRef
               blockMetadataMetadata <- declare_metadata Proxy.Proxy
               let _ = Hs.pure BlockMetadata <*> HsJSONPB.asProxy declare_metadata
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "BlockMetadata",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("metadata", blockMetadataMetadata)]}})
 
data OrdererBlockMetadata = OrdererBlockMetadata{ordererBlockMetadataLastConfig
                                                 :: Hs.Maybe Common.Common.LastConfig,
                                                 ordererBlockMetadataConsenterMetadata ::
                                                 Hs.ByteString}
                          deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named OrdererBlockMetadata where
        nameOf _ = (Hs.fromString "OrdererBlockMetadata")
 
instance HsProtobuf.HasDefault OrdererBlockMetadata
 
instance HsProtobuf.Message OrdererBlockMetadata where
        encodeMessage _
          OrdererBlockMetadata{ordererBlockMetadataLastConfig =
                                 ordererBlockMetadataLastConfig,
                               ordererBlockMetadataConsenterMetadata =
                                 ordererBlockMetadataConsenterMetadata}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   (Hs.coerce @(Hs.Maybe Common.Common.LastConfig)
                      @(HsProtobuf.Nested Common.Common.LastConfig)
                      ordererBlockMetadataLastConfig)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   ordererBlockMetadataConsenterMetadata)])
        decodeMessage _
          = (Hs.pure OrdererBlockMetadata) <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Common.Common.LastConfig))
                 @(_ (Hs.Maybe Common.Common.LastConfig))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 1)))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "LastConfig")))
                (HsProtobuf.Single "last_config")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "consenter_metadata")
                []
                "")]
 
instance HsJSONPB.ToJSONPB OrdererBlockMetadata where
        toJSONPB (OrdererBlockMetadata f1 f2)
          = (HsJSONPB.object
               ["last_config" .= f1, "consenter_metadata" .= f2])
        toEncodingPB (OrdererBlockMetadata f1 f2)
          = (HsJSONPB.pairs
               ["last_config" .= f1, "consenter_metadata" .= f2])
 
instance HsJSONPB.FromJSONPB OrdererBlockMetadata where
        parseJSONPB
          = (HsJSONPB.withObject "OrdererBlockMetadata"
               (\ obj ->
                  (Hs.pure OrdererBlockMetadata) <*> obj .: "last_config" <*>
                    obj .: "consenter_metadata"))
 
instance HsJSONPB.ToJSON OrdererBlockMetadata where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON OrdererBlockMetadata where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema OrdererBlockMetadata where
        declareNamedSchema _
          = do let declare_last_config = HsJSONPB.declareSchemaRef
               ordererBlockMetadataLastConfig <- declare_last_config Proxy.Proxy
               let declare_consenter_metadata = HsJSONPB.declareSchemaRef
               ordererBlockMetadataConsenterMetadata <- declare_consenter_metadata
                                                          Proxy.Proxy
               let _ = Hs.pure OrdererBlockMetadata <*>
                         HsJSONPB.asProxy declare_last_config
                         <*> HsJSONPB.asProxy declare_consenter_metadata
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "OrdererBlockMetadata",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("last_config",
                                                         ordererBlockMetadataLastConfig),
                                                        ("consenter_metadata",
                                                         ordererBlockMetadataConsenterMetadata)]}})