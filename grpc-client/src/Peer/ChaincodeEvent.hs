{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Peer.ChaincodeEvent where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs

data ChaincodeEvent = ChaincodeEvent{chaincodeEventChaincodeId ::
                                     Hs.Text,
                                     chaincodeEventTxId :: Hs.Text,
                                     chaincodeEventEventName :: Hs.Text,
                                     chaincodeEventPayload :: Hs.ByteString}
                    deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChaincodeEvent where
        nameOf _ = (Hs.fromString "ChaincodeEvent")

instance HsProtobuf.HasDefault ChaincodeEvent

instance HsProtobuf.Message ChaincodeEvent where
        encodeMessage _
          ChaincodeEvent{chaincodeEventChaincodeId =
                           chaincodeEventChaincodeId,
                         chaincodeEventTxId = chaincodeEventTxId,
                         chaincodeEventEventName = chaincodeEventEventName,
                         chaincodeEventPayload = chaincodeEventPayload}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   chaincodeEventChaincodeId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   chaincodeEventTxId),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   chaincodeEventEventName),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 4)
                   chaincodeEventPayload)])
        decodeMessage _
          = (Hs.pure ChaincodeEvent) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 3))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 4))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "chaincode_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "tx_id")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "event_name")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 4)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "payload")
                []
                "")]

instance HsJSONPB.ToJSONPB ChaincodeEvent where
        toJSONPB (ChaincodeEvent f1 f2 f3 f4)
          = (HsJSONPB.object
               ["chaincode_id" .= f1, "tx_id" .= f2, "event_name" .= f3,
                "payload" .= f4])
        toEncodingPB (ChaincodeEvent f1 f2 f3 f4)
          = (HsJSONPB.pairs
               ["chaincode_id" .= f1, "tx_id" .= f2, "event_name" .= f3,
                "payload" .= f4])

instance HsJSONPB.FromJSONPB ChaincodeEvent where
        parseJSONPB
          = (HsJSONPB.withObject "ChaincodeEvent"
               (\ obj ->
                  (Hs.pure ChaincodeEvent) <*> obj .: "chaincode_id" <*>
                    obj .: "tx_id"
                    <*> obj .: "event_name"
                    <*> obj .: "payload"))

instance HsJSONPB.ToJSON ChaincodeEvent where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ChaincodeEvent where
        parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema ChaincodeEvent where
        declareNamedSchema _
          = do let declare_chaincode_id = HsJSONPB.declareSchemaRef
               chaincodeEventChaincodeId <- declare_chaincode_id Proxy.Proxy
               let declare_tx_id = HsJSONPB.declareSchemaRef
               chaincodeEventTxId <- declare_tx_id Proxy.Proxy
               let declare_event_name = HsJSONPB.declareSchemaRef
               chaincodeEventEventName <- declare_event_name Proxy.Proxy
               let declare_payload = HsJSONPB.declareSchemaRef
               chaincodeEventPayload <- declare_payload Proxy.Proxy
               let _ = Hs.pure ChaincodeEvent <*>
                         HsJSONPB.asProxy declare_chaincode_id
                         <*> HsJSONPB.asProxy declare_tx_id
                         <*> HsJSONPB.asProxy declare_event_name
                         <*> HsJSONPB.asProxy declare_payload
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ChaincodeEvent",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 Hs.Just HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("chaincode_id", chaincodeEventChaincodeId),
                                                        ("tx_id", chaincodeEventTxId),
                                                        ("event_name", chaincodeEventEventName),
                                                        ("payload", chaincodeEventPayload)]}})
