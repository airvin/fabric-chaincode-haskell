{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE DeriveAnyClass    #-}
{-# LANGUAGE DataKinds         #-}
{-# LANGUAGE GADTs             #-}
{-# LANGUAGE TypeApplications  #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Common.Policies where
import qualified Prelude as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import qualified Proto3.Suite.JSONPB as HsJSONPB
import Proto3.Suite.JSONPB ((.=), (.:))
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Control.Applicative as Hs
import Control.Applicative ((<*>), (<|>), (<$>))
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty(..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Unsafe.Coerce as Hs
import qualified Msp.MspPrincipal
 
data Policy = Policy{policyType :: Hs.Int32,
                     policyValue :: Hs.ByteString}
            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Policy where
        nameOf _ = (Hs.fromString "Policy")
 
instance HsProtobuf.HasDefault Policy
 
instance HsProtobuf.Message Policy where
        encodeMessage _
          Policy{policyType = policyType, policyValue = policyValue}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   policyType),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   policyValue)])
        decodeMessage _
          = (Hs.pure Policy) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "type")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim HsProtobuf.Bytes)
                (HsProtobuf.Single "value")
                []
                "")]
 
instance HsJSONPB.ToJSONPB Policy where
        toJSONPB (Policy f1 f2)
          = (HsJSONPB.object ["type" .= f1, "value" .= f2])
        toEncodingPB (Policy f1 f2)
          = (HsJSONPB.pairs ["type" .= f1, "value" .= f2])
 
instance HsJSONPB.FromJSONPB Policy where
        parseJSONPB
          = (HsJSONPB.withObject "Policy"
               (\ obj -> (Hs.pure Policy) <*> obj .: "type" <*> obj .: "value"))
 
instance HsJSONPB.ToJSON Policy where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Policy where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema Policy where
        declareNamedSchema _
          = do let declare_type = HsJSONPB.declareSchemaRef
               policyType <- declare_type Proxy.Proxy
               let declare_value = HsJSONPB.declareSchemaRef
               policyValue <- declare_value Proxy.Proxy
               let _ = Hs.pure Policy <*> HsJSONPB.asProxy declare_type <*>
                         HsJSONPB.asProxy declare_value
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName = Hs.Just "Policy",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("type", policyType),
                                                        ("value", policyValue)]}})
 
data Policy_PolicyType = Policy_PolicyTypeUNKNOWN
                       | Policy_PolicyTypeSIGNATURE
                       | Policy_PolicyTypeMSP
                       | Policy_PolicyTypeIMPLICIT_META
                       deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named Policy_PolicyType where
        nameOf _ = (Hs.fromString "Policy_PolicyType")
 
instance HsProtobuf.HasDefault Policy_PolicyType
 
instance Hs.Bounded Policy_PolicyType where
        minBound = Policy_PolicyTypeUNKNOWN
        maxBound = Policy_PolicyTypeIMPLICIT_META
 
instance Hs.Ord Policy_PolicyType where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum Policy_PolicyType where
        toProtoEnumMay 0 = Hs.Just Policy_PolicyTypeUNKNOWN
        toProtoEnumMay 1 = Hs.Just Policy_PolicyTypeSIGNATURE
        toProtoEnumMay 2 = Hs.Just Policy_PolicyTypeMSP
        toProtoEnumMay 3 = Hs.Just Policy_PolicyTypeIMPLICIT_META
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (Policy_PolicyTypeUNKNOWN) = 0
        fromProtoEnum (Policy_PolicyTypeSIGNATURE) = 1
        fromProtoEnum (Policy_PolicyTypeMSP) = 2
        fromProtoEnum (Policy_PolicyTypeIMPLICIT_META) = 3
 
instance HsJSONPB.ToJSONPB Policy_PolicyType where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB Policy_PolicyType where
        parseJSONPB (HsJSONPB.String "UNKNOWN")
          = Hs.pure Policy_PolicyTypeUNKNOWN
        parseJSONPB (HsJSONPB.String "SIGNATURE")
          = Hs.pure Policy_PolicyTypeSIGNATURE
        parseJSONPB (HsJSONPB.String "MSP") = Hs.pure Policy_PolicyTypeMSP
        parseJSONPB (HsJSONPB.String "IMPLICIT_META")
          = Hs.pure Policy_PolicyTypeIMPLICIT_META
        parseJSONPB v = (HsJSONPB.typeMismatch "Policy_PolicyType" v)
 
instance HsJSONPB.ToJSON Policy_PolicyType where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON Policy_PolicyType where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite Policy_PolicyType
 
data SignaturePolicyEnvelope = SignaturePolicyEnvelope{signaturePolicyEnvelopeVersion
                                                       :: Hs.Int32,
                                                       signaturePolicyEnvelopeRule ::
                                                       Hs.Maybe Common.Policies.SignaturePolicy,
                                                       signaturePolicyEnvelopeIdentities ::
                                                       Hs.Vector Msp.MspPrincipal.MSPPrincipal}
                             deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SignaturePolicyEnvelope where
        nameOf _ = (Hs.fromString "SignaturePolicyEnvelope")
 
instance HsProtobuf.HasDefault SignaturePolicyEnvelope
 
instance HsProtobuf.Message SignaturePolicyEnvelope where
        encodeMessage _
          SignaturePolicyEnvelope{signaturePolicyEnvelopeVersion =
                                    signaturePolicyEnvelopeVersion,
                                  signaturePolicyEnvelopeRule = signaturePolicyEnvelopeRule,
                                  signaturePolicyEnvelopeIdentities =
                                    signaturePolicyEnvelopeIdentities}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   signaturePolicyEnvelopeVersion),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Maybe Common.Policies.SignaturePolicy)
                      @(HsProtobuf.Nested Common.Policies.SignaturePolicy)
                      signaturePolicyEnvelopeRule)),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 3)
                   (Hs.coerce @(Hs.Vector Msp.MspPrincipal.MSPPrincipal)
                      @(HsProtobuf.NestedVec Msp.MspPrincipal.MSPPrincipal)
                      signaturePolicyEnvelopeIdentities))])
        decodeMessage _
          = (Hs.pure SignaturePolicyEnvelope) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce @(_ (HsProtobuf.Nested Common.Policies.SignaturePolicy))
                 @(_ (Hs.Maybe Common.Policies.SignaturePolicy))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Msp.MspPrincipal.MSPPrincipal))
                 @(_ (Hs.Vector Msp.MspPrincipal.MSPPrincipal))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 3)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "version")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim
                   (HsProtobuf.Named (HsProtobuf.Single "SignaturePolicy")))
                (HsProtobuf.Single "rule")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 3)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "MSPPrincipal")))
                (HsProtobuf.Single "identities")
                []
                "")]
 
instance HsJSONPB.ToJSONPB SignaturePolicyEnvelope where
        toJSONPB (SignaturePolicyEnvelope f1 f2 f3)
          = (HsJSONPB.object
               ["version" .= f1, "rule" .= f2, "identities" .= f3])
        toEncodingPB (SignaturePolicyEnvelope f1 f2 f3)
          = (HsJSONPB.pairs
               ["version" .= f1, "rule" .= f2, "identities" .= f3])
 
instance HsJSONPB.FromJSONPB SignaturePolicyEnvelope where
        parseJSONPB
          = (HsJSONPB.withObject "SignaturePolicyEnvelope"
               (\ obj ->
                  (Hs.pure SignaturePolicyEnvelope) <*> obj .: "version" <*>
                    obj .: "rule"
                    <*> obj .: "identities"))
 
instance HsJSONPB.ToJSON SignaturePolicyEnvelope where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON SignaturePolicyEnvelope where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema SignaturePolicyEnvelope where
        declareNamedSchema _
          = do let declare_version = HsJSONPB.declareSchemaRef
               signaturePolicyEnvelopeVersion <- declare_version Proxy.Proxy
               let declare_rule = HsJSONPB.declareSchemaRef
               signaturePolicyEnvelopeRule <- declare_rule Proxy.Proxy
               let declare_identities = HsJSONPB.declareSchemaRef
               signaturePolicyEnvelopeIdentities <- declare_identities Proxy.Proxy
               let _ = Hs.pure SignaturePolicyEnvelope <*>
                         HsJSONPB.asProxy declare_version
                         <*> HsJSONPB.asProxy declare_rule
                         <*> HsJSONPB.asProxy declare_identities
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SignaturePolicyEnvelope",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("version", signaturePolicyEnvelopeVersion),
                                                        ("rule", signaturePolicyEnvelopeRule),
                                                        ("identities",
                                                         signaturePolicyEnvelopeIdentities)]}})
 
data SignaturePolicy = SignaturePolicy{signaturePolicyType ::
                                       Hs.Maybe SignaturePolicyType}
                     deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SignaturePolicy where
        nameOf _ = (Hs.fromString "SignaturePolicy")
 
instance HsProtobuf.HasDefault SignaturePolicy
 
instance HsProtobuf.Message SignaturePolicy where
        encodeMessage _
          SignaturePolicy{signaturePolicyType = signaturePolicyType}
          = (Hs.mconcat
               [case signaturePolicyType of
                    Hs.Nothing -> Hs.mempty
                    Hs.Just x
                      -> case x of
                             SignaturePolicyTypeSignedBy y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                                     (HsProtobuf.ForceEmit y))
                             SignaturePolicyTypeNOutOf y
                               -> (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                                     (Hs.coerce @(Hs.Maybe Common.Policies.SignaturePolicy_NOutOf)
                                        @(HsProtobuf.Nested Common.Policies.SignaturePolicy_NOutOf)
                                        (Hs.Just y)))])
        decodeMessage _
          = (Hs.pure SignaturePolicy) <*>
              (HsProtobuf.oneof Hs.Nothing
                 [((HsProtobuf.FieldNumber 1),
                   (Hs.pure (Hs.Just Hs.. SignaturePolicyTypeSignedBy)) <*>
                     HsProtobuf.decodeMessageField),
                  ((HsProtobuf.FieldNumber 2),
                   (Hs.pure (Hs.fmap SignaturePolicyTypeNOutOf)) <*>
                     (Hs.coerce
                        @(_ (HsProtobuf.Nested Common.Policies.SignaturePolicy_NOutOf))
                        @(_ (Hs.Maybe Common.Policies.SignaturePolicy_NOutOf))
                        HsProtobuf.decodeMessageField))])
        dotProto _ = []
 
instance HsJSONPB.ToJSONPB SignaturePolicy where
        toJSONPB (SignaturePolicy f1_or_f2)
          = (HsJSONPB.object
               [(let encodeType
                       = (case f1_or_f2 of
                              Hs.Just (SignaturePolicyTypeSignedBy f1)
                                -> (HsJSONPB.pair "signed_by" f1)
                              Hs.Just (SignaturePolicyTypeNOutOf f2)
                                -> (HsJSONPB.pair "n_out_of" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("Type" .= (HsJSONPB.objectOrNull [encodeType] options)) options
                       else encodeType options)])
        toEncodingPB (SignaturePolicy f1_or_f2)
          = (HsJSONPB.pairs
               [(let encodeType
                       = (case f1_or_f2 of
                              Hs.Just (SignaturePolicyTypeSignedBy f1)
                                -> (HsJSONPB.pair "signed_by" f1)
                              Hs.Just (SignaturePolicyTypeNOutOf f2)
                                -> (HsJSONPB.pair "n_out_of" f2)
                              Hs.Nothing -> Hs.mempty)
                   in
                   \ options ->
                     if HsJSONPB.optEmitNamedOneof options then
                       ("Type" .= (HsJSONPB.pairsOrNull [encodeType] options)) options
                       else encodeType options)])
 
instance HsJSONPB.FromJSONPB SignaturePolicy where
        parseJSONPB
          = (HsJSONPB.withObject "SignaturePolicy"
               (\ obj ->
                  (Hs.pure SignaturePolicy) <*>
                    (let parseType parseObj
                           = Hs.msum
                               [Hs.Just Hs.. SignaturePolicyTypeSignedBy <$>
                                  (HsJSONPB.parseField parseObj "signed_by"),
                                Hs.Just Hs.. SignaturePolicyTypeNOutOf <$>
                                  (HsJSONPB.parseField parseObj "n_out_of"),
                                Hs.pure Hs.Nothing]
                       in
                       ((obj .: "Type") Hs.>>= (HsJSONPB.withObject "Type" parseType)) <|>
                         (parseType obj))))
 
instance HsJSONPB.ToJSON SignaturePolicy where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON SignaturePolicy where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema SignaturePolicy where
        declareNamedSchema _
          = do let declare_Type = HsJSONPB.declareSchemaRef
               signaturePolicyType <- declare_Type Proxy.Proxy
               let _ = Hs.pure SignaturePolicy <*> HsJSONPB.asProxy declare_Type
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SignaturePolicy",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("Type", signaturePolicyType)]}})
 
data SignaturePolicy_NOutOf = SignaturePolicy_NOutOf{signaturePolicy_NOutOfN
                                                     :: Hs.Int32,
                                                     signaturePolicy_NOutOfRules ::
                                                     Hs.Vector Common.Policies.SignaturePolicy}
                            deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SignaturePolicy_NOutOf where
        nameOf _ = (Hs.fromString "SignaturePolicy_NOutOf")
 
instance HsProtobuf.HasDefault SignaturePolicy_NOutOf
 
instance HsProtobuf.Message SignaturePolicy_NOutOf where
        encodeMessage _
          SignaturePolicy_NOutOf{signaturePolicy_NOutOfN =
                                   signaturePolicy_NOutOfN,
                                 signaturePolicy_NOutOfRules = signaturePolicy_NOutOfRules}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   signaturePolicy_NOutOfN),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   (Hs.coerce @(Hs.Vector Common.Policies.SignaturePolicy)
                      @(HsProtobuf.NestedVec Common.Policies.SignaturePolicy)
                      signaturePolicy_NOutOfRules))])
        decodeMessage _
          = (Hs.pure SignaturePolicy_NOutOf) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (Hs.coerce
                 @(_ (HsProtobuf.NestedVec Common.Policies.SignaturePolicy))
                 @(_ (Hs.Vector Common.Policies.SignaturePolicy))
                 (HsProtobuf.at HsProtobuf.decodeMessageField
                    (HsProtobuf.FieldNumber 2)))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.Int32)
                (HsProtobuf.Single "n")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Repeated
                   (HsProtobuf.Named (HsProtobuf.Single "SignaturePolicy")))
                (HsProtobuf.Single "rules")
                []
                "")]
 
instance HsJSONPB.ToJSONPB SignaturePolicy_NOutOf where
        toJSONPB (SignaturePolicy_NOutOf f1 f2)
          = (HsJSONPB.object ["n" .= f1, "rules" .= f2])
        toEncodingPB (SignaturePolicy_NOutOf f1 f2)
          = (HsJSONPB.pairs ["n" .= f1, "rules" .= f2])
 
instance HsJSONPB.FromJSONPB SignaturePolicy_NOutOf where
        parseJSONPB
          = (HsJSONPB.withObject "SignaturePolicy_NOutOf"
               (\ obj ->
                  (Hs.pure SignaturePolicy_NOutOf) <*> obj .: "n" <*>
                    obj .: "rules"))
 
instance HsJSONPB.ToJSON SignaturePolicy_NOutOf where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON SignaturePolicy_NOutOf where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema SignaturePolicy_NOutOf where
        declareNamedSchema _
          = do let declare_n = HsJSONPB.declareSchemaRef
               signaturePolicy_NOutOfN <- declare_n Proxy.Proxy
               let declare_rules = HsJSONPB.declareSchemaRef
               signaturePolicy_NOutOfRules <- declare_rules Proxy.Proxy
               let _ = Hs.pure SignaturePolicy_NOutOf <*>
                         HsJSONPB.asProxy declare_n
                         <*> HsJSONPB.asProxy declare_rules
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SignaturePolicy_NOutOf",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("n", signaturePolicy_NOutOfN),
                                                        ("rules", signaturePolicy_NOutOfRules)]}})
 
data SignaturePolicyType = SignaturePolicyTypeSignedBy Hs.Int32
                         | SignaturePolicyTypeNOutOf Common.Policies.SignaturePolicy_NOutOf
                         deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named SignaturePolicyType where
        nameOf _ = (Hs.fromString "SignaturePolicyType")
 
instance HsJSONPB.ToSchema SignaturePolicyType where
        declareNamedSchema _
          = do let declare_signed_by = HsJSONPB.declareSchemaRef
               signaturePolicyTypeSignedBy <- declare_signed_by Proxy.Proxy
               let _ = Hs.pure SignaturePolicyTypeSignedBy <*>
                         HsJSONPB.asProxy declare_signed_by
               let declare_n_out_of = HsJSONPB.declareSchemaRef
               signaturePolicyTypeNOutOf <- declare_n_out_of Proxy.Proxy
               let _ = Hs.pure SignaturePolicyTypeNOutOf <*>
                         HsJSONPB.asProxy declare_n_out_of
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "SignaturePolicyType",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("signed_by", signaturePolicyTypeSignedBy),
                                                        ("n_out_of", signaturePolicyTypeNOutOf)],
                                                   HsJSONPB._schemaMinProperties = Hs.Just 1,
                                                   HsJSONPB._schemaMaxProperties = Hs.Just 1}})
 
data ImplicitMetaPolicy = ImplicitMetaPolicy{implicitMetaPolicySubPolicy
                                             :: Hs.Text,
                                             implicitMetaPolicyRule ::
                                             HsProtobuf.Enumerated
                                               Common.Policies.ImplicitMetaPolicy_Rule}
                        deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ImplicitMetaPolicy where
        nameOf _ = (Hs.fromString "ImplicitMetaPolicy")
 
instance HsProtobuf.HasDefault ImplicitMetaPolicy
 
instance HsProtobuf.Message ImplicitMetaPolicy where
        encodeMessage _
          ImplicitMetaPolicy{implicitMetaPolicySubPolicy =
                               implicitMetaPolicySubPolicy,
                             implicitMetaPolicyRule = implicitMetaPolicyRule}
          = (Hs.mconcat
               [(HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 1)
                   implicitMetaPolicySubPolicy),
                (HsProtobuf.encodeMessageField (HsProtobuf.FieldNumber 2)
                   implicitMetaPolicyRule)])
        decodeMessage _
          = (Hs.pure ImplicitMetaPolicy) <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 1))
              <*>
              (HsProtobuf.at HsProtobuf.decodeMessageField
                 (HsProtobuf.FieldNumber 2))
        dotProto _
          = [(HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 1)
                (HsProtobuf.Prim HsProtobuf.String)
                (HsProtobuf.Single "sub_policy")
                []
                ""),
             (HsProtobuf.DotProtoField (HsProtobuf.FieldNumber 2)
                (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Rule")))
                (HsProtobuf.Single "rule")
                []
                "")]
 
instance HsJSONPB.ToJSONPB ImplicitMetaPolicy where
        toJSONPB (ImplicitMetaPolicy f1 f2)
          = (HsJSONPB.object ["sub_policy" .= f1, "rule" .= f2])
        toEncodingPB (ImplicitMetaPolicy f1 f2)
          = (HsJSONPB.pairs ["sub_policy" .= f1, "rule" .= f2])
 
instance HsJSONPB.FromJSONPB ImplicitMetaPolicy where
        parseJSONPB
          = (HsJSONPB.withObject "ImplicitMetaPolicy"
               (\ obj ->
                  (Hs.pure ImplicitMetaPolicy) <*> obj .: "sub_policy" <*>
                    obj .: "rule"))
 
instance HsJSONPB.ToJSON ImplicitMetaPolicy where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ImplicitMetaPolicy where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsJSONPB.ToSchema ImplicitMetaPolicy where
        declareNamedSchema _
          = do let declare_sub_policy = HsJSONPB.declareSchemaRef
               implicitMetaPolicySubPolicy <- declare_sub_policy Proxy.Proxy
               let declare_rule = HsJSONPB.declareSchemaRef
               implicitMetaPolicyRule <- declare_rule Proxy.Proxy
               let _ = Hs.pure ImplicitMetaPolicy <*>
                         HsJSONPB.asProxy declare_sub_policy
                         <*> HsJSONPB.asProxy declare_rule
               Hs.return
                 (HsJSONPB.NamedSchema{HsJSONPB._namedSchemaName =
                                         Hs.Just "ImplicitMetaPolicy",
                                       HsJSONPB._namedSchemaSchema =
                                         Hs.mempty{HsJSONPB._schemaParamSchema =
                                                     Hs.mempty{HsJSONPB._paramSchemaType =
                                                                 HsJSONPB.SwaggerObject},
                                                   HsJSONPB._schemaProperties =
                                                     HsJSONPB.insOrdFromList
                                                       [("sub_policy", implicitMetaPolicySubPolicy),
                                                        ("rule", implicitMetaPolicyRule)]}})
 
data ImplicitMetaPolicy_Rule = ImplicitMetaPolicy_RuleANY
                             | ImplicitMetaPolicy_RuleALL
                             | ImplicitMetaPolicy_RuleMAJORITY
                             deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)
 
instance HsProtobuf.Named ImplicitMetaPolicy_Rule where
        nameOf _ = (Hs.fromString "ImplicitMetaPolicy_Rule")
 
instance HsProtobuf.HasDefault ImplicitMetaPolicy_Rule
 
instance Hs.Bounded ImplicitMetaPolicy_Rule where
        minBound = ImplicitMetaPolicy_RuleANY
        maxBound = ImplicitMetaPolicy_RuleMAJORITY
 
instance Hs.Ord ImplicitMetaPolicy_Rule where
        compare x y
          = Hs.compare (HsProtobuf.fromProtoEnum x)
              (HsProtobuf.fromProtoEnum y)
 
instance HsProtobuf.ProtoEnum ImplicitMetaPolicy_Rule where
        toProtoEnumMay 0 = Hs.Just ImplicitMetaPolicy_RuleANY
        toProtoEnumMay 1 = Hs.Just ImplicitMetaPolicy_RuleALL
        toProtoEnumMay 2 = Hs.Just ImplicitMetaPolicy_RuleMAJORITY
        toProtoEnumMay _ = Hs.Nothing
        fromProtoEnum (ImplicitMetaPolicy_RuleANY) = 0
        fromProtoEnum (ImplicitMetaPolicy_RuleALL) = 1
        fromProtoEnum (ImplicitMetaPolicy_RuleMAJORITY) = 2
 
instance HsJSONPB.ToJSONPB ImplicitMetaPolicy_Rule where
        toJSONPB x _ = HsJSONPB.enumFieldString x
        toEncodingPB x _ = HsJSONPB.enumFieldEncoding x
 
instance HsJSONPB.FromJSONPB ImplicitMetaPolicy_Rule where
        parseJSONPB (HsJSONPB.String "ANY")
          = Hs.pure ImplicitMetaPolicy_RuleANY
        parseJSONPB (HsJSONPB.String "ALL")
          = Hs.pure ImplicitMetaPolicy_RuleALL
        parseJSONPB (HsJSONPB.String "MAJORITY")
          = Hs.pure ImplicitMetaPolicy_RuleMAJORITY
        parseJSONPB v = (HsJSONPB.typeMismatch "ImplicitMetaPolicy_Rule" v)
 
instance HsJSONPB.ToJSON ImplicitMetaPolicy_Rule where
        toJSON = HsJSONPB.toAesonValue
        toEncoding = HsJSONPB.toAesonEncoding
 
instance HsJSONPB.FromJSON ImplicitMetaPolicy_Rule where
        parseJSON = HsJSONPB.parseJSONPB
 
instance HsProtobuf.Finite ImplicitMetaPolicy_Rule